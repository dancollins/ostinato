// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vlan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OstProto {

namespace {

const ::google::protobuf::Descriptor* Vlan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vlan_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vlan_2eproto() {
  protobuf_AddDesc_vlan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vlan.proto");
  GOOGLE_CHECK(file != NULL);
  Vlan_descriptor_ = file->message_type(0);
  static const int Vlan_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vlan, is_override_tpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vlan, tpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vlan, vlan_tag_),
  };
  Vlan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vlan_descriptor_,
      Vlan::default_instance_,
      Vlan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vlan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vlan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vlan));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vlan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vlan_descriptor_, &Vlan::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vlan_2eproto() {
  delete Vlan::default_instance_;
  delete Vlan_reflection_;
}

void protobuf_AddDesc_vlan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::OstProto::protobuf_AddDesc_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nvlan.proto\022\010OstProto\032\016protocol.proto\"@"
    "\n\004Vlan\022\030\n\020is_override_tpid\030\001 \001(\010\022\014\n\004tpid"
    "\030\002 \001(\r\022\020\n\010vlan_tag\030\003 \001(\r:1\n\004vlan\022\022.OstPr"
    "oto.Protocol\030\315\001 \001(\0132\016.OstProto.Vlan", 155);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vlan.proto", &protobuf_RegisterTypes);
  Vlan::default_instance_ = new Vlan();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::OstProto::Protocol::default_instance(),
    205, 11, false, false,
    &::OstProto::Vlan::default_instance());
  Vlan::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vlan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vlan_2eproto {
  StaticDescriptorInitializer_vlan_2eproto() {
    protobuf_AddDesc_vlan_2eproto();
  }
} static_descriptor_initializer_vlan_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Vlan::kIsOverrideTpidFieldNumber;
const int Vlan::kTpidFieldNumber;
const int Vlan::kVlanTagFieldNumber;
#endif  // !_MSC_VER

Vlan::Vlan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vlan::InitAsDefaultInstance() {
}

Vlan::Vlan(const Vlan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vlan::SharedCtor() {
  _cached_size_ = 0;
  is_override_tpid_ = false;
  tpid_ = 0u;
  vlan_tag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vlan::~Vlan() {
  SharedDtor();
}

void Vlan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vlan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vlan_descriptor_;
}

const Vlan& Vlan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vlan_2eproto();  return *default_instance_;
}

Vlan* Vlan::default_instance_ = NULL;

Vlan* Vlan::New() const {
  return new Vlan;
}

void Vlan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_override_tpid_ = false;
    tpid_ = 0u;
    vlan_tag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_override_tpid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_tpid_)));
          set_has_is_override_tpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tpid;
        break;
      }
      
      // optional uint32 tpid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpid_)));
          set_has_tpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vlan_tag;
        break;
      }
      
      // optional uint32 vlan_tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vlan_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vlan_tag_)));
          set_has_vlan_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_override_tpid = 1;
  if (has_is_override_tpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_override_tpid(), output);
  }
  
  // optional uint32 tpid = 2;
  if (has_tpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpid(), output);
  }
  
  // optional uint32 vlan_tag = 3;
  if (has_vlan_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vlan_tag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vlan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_override_tpid = 1;
  if (has_is_override_tpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_override_tpid(), target);
  }
  
  // optional uint32 tpid = 2;
  if (has_tpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tpid(), target);
  }
  
  // optional uint32 vlan_tag = 3;
  if (has_vlan_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vlan_tag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vlan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_override_tpid = 1;
    if (has_is_override_tpid()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 tpid = 2;
    if (has_tpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tpid());
    }
    
    // optional uint32 vlan_tag = 3;
    if (has_vlan_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vlan_tag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vlan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vlan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vlan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vlan::MergeFrom(const Vlan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_override_tpid()) {
      set_is_override_tpid(from.is_override_tpid());
    }
    if (from.has_tpid()) {
      set_tpid(from.tpid());
    }
    if (from.has_vlan_tag()) {
      set_vlan_tag(from.vlan_tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vlan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vlan::CopyFrom(const Vlan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vlan::IsInitialized() const {
  
  return true;
}

void Vlan::Swap(Vlan* other) {
  if (other != this) {
    std::swap(is_override_tpid_, other->is_override_tpid_);
    std::swap(tpid_, other->tpid_);
    std::swap(vlan_tag_, other->vlan_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vlan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vlan_descriptor_;
  metadata.reflection = Vlan_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Vlan >, 11, false >
  vlan(kVlanFieldNumber, ::OstProto::Vlan::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

// @@protoc_insertion_point(global_scope)
