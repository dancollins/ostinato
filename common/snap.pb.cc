// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "snap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OstProto {

namespace {

const ::google::protobuf::Descriptor* Snap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Snap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_snap_2eproto() {
  protobuf_AddDesc_snap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "snap.proto");
  GOOGLE_CHECK(file != NULL);
  Snap_descriptor_ = file->message_type(0);
  static const int Snap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snap, is_override_oui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snap, is_override_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snap, oui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snap, type_),
  };
  Snap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Snap_descriptor_,
      Snap::default_instance_,
      Snap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Snap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Snap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_snap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Snap_descriptor_, &Snap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_snap_2eproto() {
  delete Snap::default_instance_;
  delete Snap_reflection_;
}

void protobuf_AddDesc_snap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::OstProto::protobuf_AddDesc_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nsnap.proto\022\010OstProto\032\016protocol.proto\"T"
    "\n\004Snap\022\027\n\017is_override_oui\030\003 \001(\010\022\030\n\020is_ov"
    "erride_type\030\004 \001(\010\022\013\n\003oui\030\001 \001(\r\022\014\n\004type\030\002"
    " \001(\r:1\n\004snap\022\022.OstProto.Protocol\030\313\001 \001(\0132"
    "\016.OstProto.Snap", 175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "snap.proto", &protobuf_RegisterTypes);
  Snap::default_instance_ = new Snap();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::OstProto::Protocol::default_instance(),
    203, 11, false, false,
    &::OstProto::Snap::default_instance());
  Snap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_snap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_snap_2eproto {
  StaticDescriptorInitializer_snap_2eproto() {
    protobuf_AddDesc_snap_2eproto();
  }
} static_descriptor_initializer_snap_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Snap::kIsOverrideOuiFieldNumber;
const int Snap::kIsOverrideTypeFieldNumber;
const int Snap::kOuiFieldNumber;
const int Snap::kTypeFieldNumber;
#endif  // !_MSC_VER

Snap::Snap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Snap::InitAsDefaultInstance() {
}

Snap::Snap(const Snap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Snap::SharedCtor() {
  _cached_size_ = 0;
  is_override_oui_ = false;
  is_override_type_ = false;
  oui_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Snap::~Snap() {
  SharedDtor();
}

void Snap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Snap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Snap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Snap_descriptor_;
}

const Snap& Snap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snap_2eproto();  return *default_instance_;
}

Snap* Snap::default_instance_ = NULL;

Snap* Snap::New() const {
  return new Snap;
}

void Snap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_override_oui_ = false;
    is_override_type_ = false;
    oui_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Snap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 oui = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oui_)));
          set_has_oui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_override_oui;
        break;
      }
      
      // optional bool is_override_oui = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_oui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_oui_)));
          set_has_is_override_oui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_override_type;
        break;
      }
      
      // optional bool is_override_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_type_)));
          set_has_is_override_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Snap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 oui = 1;
  if (has_oui()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oui(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional bool is_override_oui = 3;
  if (has_is_override_oui()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_override_oui(), output);
  }
  
  // optional bool is_override_type = 4;
  if (has_is_override_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_override_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Snap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 oui = 1;
  if (has_oui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oui(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional bool is_override_oui = 3;
  if (has_is_override_oui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_override_oui(), target);
  }
  
  // optional bool is_override_type = 4;
  if (has_is_override_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_override_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Snap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_override_oui = 3;
    if (has_is_override_oui()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_override_type = 4;
    if (has_is_override_type()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 oui = 1;
    if (has_oui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oui());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Snap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Snap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Snap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Snap::MergeFrom(const Snap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_override_oui()) {
      set_is_override_oui(from.is_override_oui());
    }
    if (from.has_is_override_type()) {
      set_is_override_type(from.is_override_type());
    }
    if (from.has_oui()) {
      set_oui(from.oui());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Snap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snap::CopyFrom(const Snap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snap::IsInitialized() const {
  
  return true;
}

void Snap::Swap(Snap* other) {
  if (other != this) {
    std::swap(is_override_oui_, other->is_override_oui_);
    std::swap(is_override_type_, other->is_override_type_);
    std::swap(oui_, other->oui_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Snap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Snap_descriptor_;
  metadata.reflection = Snap_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Snap >, 11, false >
  snap(kSnapFieldNumber, ::OstProto::Snap::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

// @@protoc_insertion_point(global_scope)
