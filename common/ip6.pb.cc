// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ip6.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OstProto {

namespace {

const ::google::protobuf::Descriptor* Ip6_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ip6_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Ip6_AddrMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ip6_2eproto() {
  protobuf_AddDesc_ip6_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ip6.proto");
  GOOGLE_CHECK(file != NULL);
  Ip6_descriptor_ = file->message_type(0);
  static const int Ip6_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, is_override_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, is_override_payload_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, is_override_next_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, traffic_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, flow_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, payload_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, next_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, hop_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, src_addr_hi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, src_addr_lo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, src_addr_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, src_addr_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, src_addr_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, dst_addr_hi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, dst_addr_lo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, dst_addr_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, dst_addr_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, dst_addr_prefix_),
  };
  Ip6_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ip6_descriptor_,
      Ip6::default_instance_,
      Ip6_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip6, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ip6));
  Ip6_AddrMode_descriptor_ = Ip6_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ip6_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ip6_descriptor_, &Ip6::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ip6_2eproto() {
  delete Ip6::default_instance_;
  delete Ip6_reflection_;
}

void protobuf_AddDesc_ip6_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::OstProto::protobuf_AddDesc_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tip6.proto\022\010OstProto\032\016protocol.proto\"\344\004"
    "\n\003Ip6\022\033\n\023is_override_version\030\001 \001(\010\022\"\n\032is"
    "_override_payload_length\030\002 \001(\010\022\037\n\027is_ove"
    "rride_next_header\030\003 \001(\010\022\022\n\007version\030\004 \001(\r"
    ":\0016\022\025\n\rtraffic_class\030\005 \001(\r\022\022\n\nflow_label"
    "\030\006 \001(\r\022\026\n\016payload_length\030\007 \001(\r\022\023\n\013next_h"
    "eader\030\010 \001(\r\022\026\n\thop_limit\030\t \001(\r:\003127\022\023\n\013s"
    "rc_addr_hi\030\n \001(\004\022\023\n\013src_addr_lo\030\013 \001(\004\0225\n"
    "\rsrc_addr_mode\030\014 \001(\0162\026.OstProto.Ip6.Addr"
    "Mode:\006kFixed\022\032\n\016src_addr_count\030\r \001(\r:\00216"
    "\022\033\n\017src_addr_prefix\030\016 \001(\r:\00264\022\023\n\013dst_add"
    "r_hi\030\017 \001(\004\022\023\n\013dst_addr_lo\030\020 \001(\004\0225\n\rdst_a"
    "ddr_mode\030\021 \001(\0162\026.OstProto.Ip6.AddrMode:\006"
    "kFixed\022\032\n\016dst_addr_count\030\022 \001(\r:\00216\022\033\n\017ds"
    "t_addr_prefix\030\023 \001(\r:\00264\"C\n\010AddrMode\022\n\n\006k"
    "Fixed\020\000\022\014\n\010kIncHost\020\001\022\014\n\010kDecHost\020\002\022\017\n\013k"
    "RandomHost\020\003:/\n\003ip6\022\022.OstProto.Protocol\030"
    "\256\002 \001(\0132\r.OstProto.Ip6", 701);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ip6.proto", &protobuf_RegisterTypes);
  Ip6::default_instance_ = new Ip6();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::OstProto::Protocol::default_instance(),
    302, 11, false, false,
    &::OstProto::Ip6::default_instance());
  Ip6::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ip6_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ip6_2eproto {
  StaticDescriptorInitializer_ip6_2eproto() {
    protobuf_AddDesc_ip6_2eproto();
  }
} static_descriptor_initializer_ip6_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Ip6_AddrMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ip6_AddrMode_descriptor_;
}
bool Ip6_AddrMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Ip6_AddrMode Ip6::kFixed;
const Ip6_AddrMode Ip6::kIncHost;
const Ip6_AddrMode Ip6::kDecHost;
const Ip6_AddrMode Ip6::kRandomHost;
const Ip6_AddrMode Ip6::AddrMode_MIN;
const Ip6_AddrMode Ip6::AddrMode_MAX;
const int Ip6::AddrMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Ip6::kIsOverrideVersionFieldNumber;
const int Ip6::kIsOverridePayloadLengthFieldNumber;
const int Ip6::kIsOverrideNextHeaderFieldNumber;
const int Ip6::kVersionFieldNumber;
const int Ip6::kTrafficClassFieldNumber;
const int Ip6::kFlowLabelFieldNumber;
const int Ip6::kPayloadLengthFieldNumber;
const int Ip6::kNextHeaderFieldNumber;
const int Ip6::kHopLimitFieldNumber;
const int Ip6::kSrcAddrHiFieldNumber;
const int Ip6::kSrcAddrLoFieldNumber;
const int Ip6::kSrcAddrModeFieldNumber;
const int Ip6::kSrcAddrCountFieldNumber;
const int Ip6::kSrcAddrPrefixFieldNumber;
const int Ip6::kDstAddrHiFieldNumber;
const int Ip6::kDstAddrLoFieldNumber;
const int Ip6::kDstAddrModeFieldNumber;
const int Ip6::kDstAddrCountFieldNumber;
const int Ip6::kDstAddrPrefixFieldNumber;
#endif  // !_MSC_VER

Ip6::Ip6()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ip6::InitAsDefaultInstance() {
}

Ip6::Ip6(const Ip6& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ip6::SharedCtor() {
  _cached_size_ = 0;
  is_override_version_ = false;
  is_override_payload_length_ = false;
  is_override_next_header_ = false;
  version_ = 6u;
  traffic_class_ = 0u;
  flow_label_ = 0u;
  payload_length_ = 0u;
  next_header_ = 0u;
  hop_limit_ = 127u;
  src_addr_hi_ = GOOGLE_ULONGLONG(0);
  src_addr_lo_ = GOOGLE_ULONGLONG(0);
  src_addr_mode_ = 0;
  src_addr_count_ = 16u;
  src_addr_prefix_ = 64u;
  dst_addr_hi_ = GOOGLE_ULONGLONG(0);
  dst_addr_lo_ = GOOGLE_ULONGLONG(0);
  dst_addr_mode_ = 0;
  dst_addr_count_ = 16u;
  dst_addr_prefix_ = 64u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ip6::~Ip6() {
  SharedDtor();
}

void Ip6::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ip6::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ip6::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ip6_descriptor_;
}

const Ip6& Ip6::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ip6_2eproto();  return *default_instance_;
}

Ip6* Ip6::default_instance_ = NULL;

Ip6* Ip6::New() const {
  return new Ip6;
}

void Ip6::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_override_version_ = false;
    is_override_payload_length_ = false;
    is_override_next_header_ = false;
    version_ = 6u;
    traffic_class_ = 0u;
    flow_label_ = 0u;
    payload_length_ = 0u;
    next_header_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hop_limit_ = 127u;
    src_addr_hi_ = GOOGLE_ULONGLONG(0);
    src_addr_lo_ = GOOGLE_ULONGLONG(0);
    src_addr_mode_ = 0;
    src_addr_count_ = 16u;
    src_addr_prefix_ = 64u;
    dst_addr_hi_ = GOOGLE_ULONGLONG(0);
    dst_addr_lo_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    dst_addr_mode_ = 0;
    dst_addr_count_ = 16u;
    dst_addr_prefix_ = 64u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ip6::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_override_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_version_)));
          set_has_is_override_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_override_payload_length;
        break;
      }
      
      // optional bool is_override_payload_length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_payload_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_payload_length_)));
          set_has_is_override_payload_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_override_next_header;
        break;
      }
      
      // optional bool is_override_next_header = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_next_header:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_next_header_)));
          set_has_is_override_next_header();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_version;
        break;
      }
      
      // optional uint32 version = 4 [default = 6];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_traffic_class;
        break;
      }
      
      // optional uint32 traffic_class = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traffic_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &traffic_class_)));
          set_has_traffic_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_flow_label;
        break;
      }
      
      // optional uint32 flow_label = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flow_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flow_label_)));
          set_has_flow_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_payload_length;
        break;
      }
      
      // optional uint32 payload_length = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payload_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_length_)));
          set_has_payload_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_next_header;
        break;
      }
      
      // optional uint32 next_header = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_header:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_header_)));
          set_has_next_header();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hop_limit;
        break;
      }
      
      // optional uint32 hop_limit = 9 [default = 127];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hop_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hop_limit_)));
          set_has_hop_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_src_addr_hi;
        break;
      }
      
      // optional uint64 src_addr_hi = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_addr_hi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_addr_hi_)));
          set_has_src_addr_hi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_src_addr_lo;
        break;
      }
      
      // optional uint64 src_addr_lo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_addr_lo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_addr_lo_)));
          set_has_src_addr_lo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_src_addr_mode;
        break;
      }
      
      // optional .OstProto.Ip6.AddrMode src_addr_mode = 12 [default = kFixed];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_addr_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OstProto::Ip6_AddrMode_IsValid(value)) {
            set_src_addr_mode(static_cast< ::OstProto::Ip6_AddrMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_src_addr_count;
        break;
      }
      
      // optional uint32 src_addr_count = 13 [default = 16];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_addr_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_addr_count_)));
          set_has_src_addr_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_src_addr_prefix;
        break;
      }
      
      // optional uint32 src_addr_prefix = 14 [default = 64];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_addr_prefix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_addr_prefix_)));
          set_has_src_addr_prefix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_dst_addr_hi;
        break;
      }
      
      // optional uint64 dst_addr_hi = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_addr_hi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_addr_hi_)));
          set_has_dst_addr_hi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_dst_addr_lo;
        break;
      }
      
      // optional uint64 dst_addr_lo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_addr_lo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_addr_lo_)));
          set_has_dst_addr_lo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_dst_addr_mode;
        break;
      }
      
      // optional .OstProto.Ip6.AddrMode dst_addr_mode = 17 [default = kFixed];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_addr_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OstProto::Ip6_AddrMode_IsValid(value)) {
            set_dst_addr_mode(static_cast< ::OstProto::Ip6_AddrMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_dst_addr_count;
        break;
      }
      
      // optional uint32 dst_addr_count = 18 [default = 16];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_addr_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_addr_count_)));
          set_has_dst_addr_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_dst_addr_prefix;
        break;
      }
      
      // optional uint32 dst_addr_prefix = 19 [default = 64];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_addr_prefix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_addr_prefix_)));
          set_has_dst_addr_prefix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ip6::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_override_version = 1;
  if (has_is_override_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_override_version(), output);
  }
  
  // optional bool is_override_payload_length = 2;
  if (has_is_override_payload_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_override_payload_length(), output);
  }
  
  // optional bool is_override_next_header = 3;
  if (has_is_override_next_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_override_next_header(), output);
  }
  
  // optional uint32 version = 4 [default = 6];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->version(), output);
  }
  
  // optional uint32 traffic_class = 5;
  if (has_traffic_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->traffic_class(), output);
  }
  
  // optional uint32 flow_label = 6;
  if (has_flow_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->flow_label(), output);
  }
  
  // optional uint32 payload_length = 7;
  if (has_payload_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->payload_length(), output);
  }
  
  // optional uint32 next_header = 8;
  if (has_next_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->next_header(), output);
  }
  
  // optional uint32 hop_limit = 9 [default = 127];
  if (has_hop_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hop_limit(), output);
  }
  
  // optional uint64 src_addr_hi = 10;
  if (has_src_addr_hi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->src_addr_hi(), output);
  }
  
  // optional uint64 src_addr_lo = 11;
  if (has_src_addr_lo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->src_addr_lo(), output);
  }
  
  // optional .OstProto.Ip6.AddrMode src_addr_mode = 12 [default = kFixed];
  if (has_src_addr_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->src_addr_mode(), output);
  }
  
  // optional uint32 src_addr_count = 13 [default = 16];
  if (has_src_addr_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->src_addr_count(), output);
  }
  
  // optional uint32 src_addr_prefix = 14 [default = 64];
  if (has_src_addr_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->src_addr_prefix(), output);
  }
  
  // optional uint64 dst_addr_hi = 15;
  if (has_dst_addr_hi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->dst_addr_hi(), output);
  }
  
  // optional uint64 dst_addr_lo = 16;
  if (has_dst_addr_lo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->dst_addr_lo(), output);
  }
  
  // optional .OstProto.Ip6.AddrMode dst_addr_mode = 17 [default = kFixed];
  if (has_dst_addr_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->dst_addr_mode(), output);
  }
  
  // optional uint32 dst_addr_count = 18 [default = 16];
  if (has_dst_addr_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->dst_addr_count(), output);
  }
  
  // optional uint32 dst_addr_prefix = 19 [default = 64];
  if (has_dst_addr_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->dst_addr_prefix(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ip6::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_override_version = 1;
  if (has_is_override_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_override_version(), target);
  }
  
  // optional bool is_override_payload_length = 2;
  if (has_is_override_payload_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_override_payload_length(), target);
  }
  
  // optional bool is_override_next_header = 3;
  if (has_is_override_next_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_override_next_header(), target);
  }
  
  // optional uint32 version = 4 [default = 6];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->version(), target);
  }
  
  // optional uint32 traffic_class = 5;
  if (has_traffic_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->traffic_class(), target);
  }
  
  // optional uint32 flow_label = 6;
  if (has_flow_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->flow_label(), target);
  }
  
  // optional uint32 payload_length = 7;
  if (has_payload_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->payload_length(), target);
  }
  
  // optional uint32 next_header = 8;
  if (has_next_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->next_header(), target);
  }
  
  // optional uint32 hop_limit = 9 [default = 127];
  if (has_hop_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hop_limit(), target);
  }
  
  // optional uint64 src_addr_hi = 10;
  if (has_src_addr_hi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->src_addr_hi(), target);
  }
  
  // optional uint64 src_addr_lo = 11;
  if (has_src_addr_lo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->src_addr_lo(), target);
  }
  
  // optional .OstProto.Ip6.AddrMode src_addr_mode = 12 [default = kFixed];
  if (has_src_addr_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->src_addr_mode(), target);
  }
  
  // optional uint32 src_addr_count = 13 [default = 16];
  if (has_src_addr_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->src_addr_count(), target);
  }
  
  // optional uint32 src_addr_prefix = 14 [default = 64];
  if (has_src_addr_prefix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->src_addr_prefix(), target);
  }
  
  // optional uint64 dst_addr_hi = 15;
  if (has_dst_addr_hi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->dst_addr_hi(), target);
  }
  
  // optional uint64 dst_addr_lo = 16;
  if (has_dst_addr_lo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->dst_addr_lo(), target);
  }
  
  // optional .OstProto.Ip6.AddrMode dst_addr_mode = 17 [default = kFixed];
  if (has_dst_addr_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->dst_addr_mode(), target);
  }
  
  // optional uint32 dst_addr_count = 18 [default = 16];
  if (has_dst_addr_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->dst_addr_count(), target);
  }
  
  // optional uint32 dst_addr_prefix = 19 [default = 64];
  if (has_dst_addr_prefix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->dst_addr_prefix(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ip6::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_override_version = 1;
    if (has_is_override_version()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_override_payload_length = 2;
    if (has_is_override_payload_length()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_override_next_header = 3;
    if (has_is_override_next_header()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 version = 4 [default = 6];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional uint32 traffic_class = 5;
    if (has_traffic_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->traffic_class());
    }
    
    // optional uint32 flow_label = 6;
    if (has_flow_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flow_label());
    }
    
    // optional uint32 payload_length = 7;
    if (has_payload_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload_length());
    }
    
    // optional uint32 next_header = 8;
    if (has_next_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_header());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 hop_limit = 9 [default = 127];
    if (has_hop_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hop_limit());
    }
    
    // optional uint64 src_addr_hi = 10;
    if (has_src_addr_hi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_addr_hi());
    }
    
    // optional uint64 src_addr_lo = 11;
    if (has_src_addr_lo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_addr_lo());
    }
    
    // optional .OstProto.Ip6.AddrMode src_addr_mode = 12 [default = kFixed];
    if (has_src_addr_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_addr_mode());
    }
    
    // optional uint32 src_addr_count = 13 [default = 16];
    if (has_src_addr_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_addr_count());
    }
    
    // optional uint32 src_addr_prefix = 14 [default = 64];
    if (has_src_addr_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_addr_prefix());
    }
    
    // optional uint64 dst_addr_hi = 15;
    if (has_dst_addr_hi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_addr_hi());
    }
    
    // optional uint64 dst_addr_lo = 16;
    if (has_dst_addr_lo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_addr_lo());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OstProto.Ip6.AddrMode dst_addr_mode = 17 [default = kFixed];
    if (has_dst_addr_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dst_addr_mode());
    }
    
    // optional uint32 dst_addr_count = 18 [default = 16];
    if (has_dst_addr_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_addr_count());
    }
    
    // optional uint32 dst_addr_prefix = 19 [default = 64];
    if (has_dst_addr_prefix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_addr_prefix());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ip6::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ip6* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ip6*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ip6::MergeFrom(const Ip6& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_override_version()) {
      set_is_override_version(from.is_override_version());
    }
    if (from.has_is_override_payload_length()) {
      set_is_override_payload_length(from.is_override_payload_length());
    }
    if (from.has_is_override_next_header()) {
      set_is_override_next_header(from.is_override_next_header());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_traffic_class()) {
      set_traffic_class(from.traffic_class());
    }
    if (from.has_flow_label()) {
      set_flow_label(from.flow_label());
    }
    if (from.has_payload_length()) {
      set_payload_length(from.payload_length());
    }
    if (from.has_next_header()) {
      set_next_header(from.next_header());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hop_limit()) {
      set_hop_limit(from.hop_limit());
    }
    if (from.has_src_addr_hi()) {
      set_src_addr_hi(from.src_addr_hi());
    }
    if (from.has_src_addr_lo()) {
      set_src_addr_lo(from.src_addr_lo());
    }
    if (from.has_src_addr_mode()) {
      set_src_addr_mode(from.src_addr_mode());
    }
    if (from.has_src_addr_count()) {
      set_src_addr_count(from.src_addr_count());
    }
    if (from.has_src_addr_prefix()) {
      set_src_addr_prefix(from.src_addr_prefix());
    }
    if (from.has_dst_addr_hi()) {
      set_dst_addr_hi(from.dst_addr_hi());
    }
    if (from.has_dst_addr_lo()) {
      set_dst_addr_lo(from.dst_addr_lo());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dst_addr_mode()) {
      set_dst_addr_mode(from.dst_addr_mode());
    }
    if (from.has_dst_addr_count()) {
      set_dst_addr_count(from.dst_addr_count());
    }
    if (from.has_dst_addr_prefix()) {
      set_dst_addr_prefix(from.dst_addr_prefix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ip6::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ip6::CopyFrom(const Ip6& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ip6::IsInitialized() const {
  
  return true;
}

void Ip6::Swap(Ip6* other) {
  if (other != this) {
    std::swap(is_override_version_, other->is_override_version_);
    std::swap(is_override_payload_length_, other->is_override_payload_length_);
    std::swap(is_override_next_header_, other->is_override_next_header_);
    std::swap(version_, other->version_);
    std::swap(traffic_class_, other->traffic_class_);
    std::swap(flow_label_, other->flow_label_);
    std::swap(payload_length_, other->payload_length_);
    std::swap(next_header_, other->next_header_);
    std::swap(hop_limit_, other->hop_limit_);
    std::swap(src_addr_hi_, other->src_addr_hi_);
    std::swap(src_addr_lo_, other->src_addr_lo_);
    std::swap(src_addr_mode_, other->src_addr_mode_);
    std::swap(src_addr_count_, other->src_addr_count_);
    std::swap(src_addr_prefix_, other->src_addr_prefix_);
    std::swap(dst_addr_hi_, other->dst_addr_hi_);
    std::swap(dst_addr_lo_, other->dst_addr_lo_);
    std::swap(dst_addr_mode_, other->dst_addr_mode_);
    std::swap(dst_addr_count_, other->dst_addr_count_);
    std::swap(dst_addr_prefix_, other->dst_addr_prefix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ip6::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ip6_descriptor_;
  metadata.reflection = Ip6_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Ip6 >, 11, false >
  ip6(kIp6FieldNumber, ::OstProto::Ip6::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

// @@protoc_insertion_point(global_scope)
