// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ip4.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OstProto {

namespace {

const ::google::protobuf::Descriptor* Ip4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ip4_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Ip4_IpAddrMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ip4_2eproto() {
  protobuf_AddDesc_ip4_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ip4.proto");
  GOOGLE_CHECK(file != NULL);
  Ip4_descriptor_ = file->message_type(0);
  static const int Ip4_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, is_override_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, is_override_hdrlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, is_override_totlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, is_override_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, is_override_cksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, ver_hdrlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, tos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, totlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, frag_ofs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, cksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, src_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, src_ip_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, src_ip_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, src_ip_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, dst_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, dst_ip_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, dst_ip_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, dst_ip_mask_),
  };
  Ip4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ip4_descriptor_,
      Ip4::default_instance_,
      Ip4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ip4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ip4));
  Ip4_IpAddrMode_descriptor_ = Ip4_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ip4_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ip4_descriptor_, &Ip4::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ip4_2eproto() {
  delete Ip4::default_instance_;
  delete Ip4_reflection_;
}

void protobuf_AddDesc_ip4_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::OstProto::protobuf_AddDesc_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tip4.proto\022\010OstProto\032\016protocol.proto\"\212\005"
    "\n\003Ip4\022\027\n\017is_override_ver\030\001 \001(\010\022\032\n\022is_ove"
    "rride_hdrlen\030\002 \001(\010\022\032\n\022is_override_totlen"
    "\030\003 \001(\010\022\031\n\021is_override_proto\030\036 \001(\010\022\031\n\021is_"
    "override_cksum\030\004 \001(\010\022\026\n\nver_hdrlen\030\005 \001(\r"
    ":\00269\022\013\n\003tos\030\006 \001(\r\022\016\n\006totlen\030\007 \001(\r\022\020\n\002id\030"
    "\010 \001(\r:\0041234\022\r\n\005flags\030\t \001(\r\022\020\n\010frag_ofs\030\n"
    " \001(\r\022\020\n\003ttl\030\013 \001(\r:\003127\022\r\n\005proto\030\014 \001(\r\022\r\n"
    "\005cksum\030\r \001(\r\022\016\n\006src_ip\030\016 \001(\007\0229\n\013src_ip_m"
    "ode\030\017 \001(\0162\030.OstProto.Ip4.IpAddrMode:\ne_i"
    "m_fixed\022\030\n\014src_ip_count\030\020 \001(\r:\00216\022\037\n\013src"
    "_ip_mask\030\021 \001(\007:\n4294967040\022\016\n\006dst_ip\030\022 \001"
    "(\007\0229\n\013dst_ip_mode\030\023 \001(\0162\030.OstProto.Ip4.I"
    "pAddrMode:\ne_im_fixed\022\030\n\014dst_ip_count\030\024 "
    "\001(\r:\00216\022\037\n\013dst_ip_mask\030\025 \001(\007:\n4294967040"
    "\"X\n\nIpAddrMode\022\016\n\ne_im_fixed\020\000\022\021\n\re_im_i"
    "nc_host\020\001\022\021\n\re_im_dec_host\020\002\022\024\n\020e_im_ran"
    "dom_host\020\003:/\n\003ip4\022\022.OstProto.Protocol\030\255\002"
    " \001(\0132\r.OstProto.Ip4", 739);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ip4.proto", &protobuf_RegisterTypes);
  Ip4::default_instance_ = new Ip4();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::OstProto::Protocol::default_instance(),
    301, 11, false, false,
    &::OstProto::Ip4::default_instance());
  Ip4::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ip4_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ip4_2eproto {
  StaticDescriptorInitializer_ip4_2eproto() {
    protobuf_AddDesc_ip4_2eproto();
  }
} static_descriptor_initializer_ip4_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Ip4_IpAddrMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ip4_IpAddrMode_descriptor_;
}
bool Ip4_IpAddrMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Ip4_IpAddrMode Ip4::e_im_fixed;
const Ip4_IpAddrMode Ip4::e_im_inc_host;
const Ip4_IpAddrMode Ip4::e_im_dec_host;
const Ip4_IpAddrMode Ip4::e_im_random_host;
const Ip4_IpAddrMode Ip4::IpAddrMode_MIN;
const Ip4_IpAddrMode Ip4::IpAddrMode_MAX;
const int Ip4::IpAddrMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Ip4::kIsOverrideVerFieldNumber;
const int Ip4::kIsOverrideHdrlenFieldNumber;
const int Ip4::kIsOverrideTotlenFieldNumber;
const int Ip4::kIsOverrideProtoFieldNumber;
const int Ip4::kIsOverrideCksumFieldNumber;
const int Ip4::kVerHdrlenFieldNumber;
const int Ip4::kTosFieldNumber;
const int Ip4::kTotlenFieldNumber;
const int Ip4::kIdFieldNumber;
const int Ip4::kFlagsFieldNumber;
const int Ip4::kFragOfsFieldNumber;
const int Ip4::kTtlFieldNumber;
const int Ip4::kProtoFieldNumber;
const int Ip4::kCksumFieldNumber;
const int Ip4::kSrcIpFieldNumber;
const int Ip4::kSrcIpModeFieldNumber;
const int Ip4::kSrcIpCountFieldNumber;
const int Ip4::kSrcIpMaskFieldNumber;
const int Ip4::kDstIpFieldNumber;
const int Ip4::kDstIpModeFieldNumber;
const int Ip4::kDstIpCountFieldNumber;
const int Ip4::kDstIpMaskFieldNumber;
#endif  // !_MSC_VER

Ip4::Ip4()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ip4::InitAsDefaultInstance() {
}

Ip4::Ip4(const Ip4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ip4::SharedCtor() {
  _cached_size_ = 0;
  is_override_ver_ = false;
  is_override_hdrlen_ = false;
  is_override_totlen_ = false;
  is_override_proto_ = false;
  is_override_cksum_ = false;
  ver_hdrlen_ = 69u;
  tos_ = 0u;
  totlen_ = 0u;
  id_ = 1234u;
  flags_ = 0u;
  frag_ofs_ = 0u;
  ttl_ = 127u;
  proto_ = 0u;
  cksum_ = 0u;
  src_ip_ = 0u;
  src_ip_mode_ = 0;
  src_ip_count_ = 16u;
  src_ip_mask_ = 4294967040u;
  dst_ip_ = 0u;
  dst_ip_mode_ = 0;
  dst_ip_count_ = 16u;
  dst_ip_mask_ = 4294967040u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ip4::~Ip4() {
  SharedDtor();
}

void Ip4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ip4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ip4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ip4_descriptor_;
}

const Ip4& Ip4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ip4_2eproto();  return *default_instance_;
}

Ip4* Ip4::default_instance_ = NULL;

Ip4* Ip4::New() const {
  return new Ip4;
}

void Ip4::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_override_ver_ = false;
    is_override_hdrlen_ = false;
    is_override_totlen_ = false;
    is_override_proto_ = false;
    is_override_cksum_ = false;
    ver_hdrlen_ = 69u;
    tos_ = 0u;
    totlen_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    id_ = 1234u;
    flags_ = 0u;
    frag_ofs_ = 0u;
    ttl_ = 127u;
    proto_ = 0u;
    cksum_ = 0u;
    src_ip_ = 0u;
    src_ip_mode_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    src_ip_count_ = 16u;
    src_ip_mask_ = 4294967040u;
    dst_ip_ = 0u;
    dst_ip_mode_ = 0;
    dst_ip_count_ = 16u;
    dst_ip_mask_ = 4294967040u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ip4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_override_ver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_ver_)));
          set_has_is_override_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_override_hdrlen;
        break;
      }
      
      // optional bool is_override_hdrlen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_hdrlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_hdrlen_)));
          set_has_is_override_hdrlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_override_totlen;
        break;
      }
      
      // optional bool is_override_totlen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_totlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_totlen_)));
          set_has_is_override_totlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_override_cksum;
        break;
      }
      
      // optional bool is_override_cksum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_cksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_cksum_)));
          set_has_is_override_cksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ver_hdrlen;
        break;
      }
      
      // optional uint32 ver_hdrlen = 5 [default = 69];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ver_hdrlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_hdrlen_)));
          set_has_ver_hdrlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tos;
        break;
      }
      
      // optional uint32 tos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tos_)));
          set_has_tos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totlen;
        break;
      }
      
      // optional uint32 totlen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totlen_)));
          set_has_totlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 8 [default = 1234];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_flags;
        break;
      }
      
      // optional uint32 flags = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_frag_ofs;
        break;
      }
      
      // optional uint32 frag_ofs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frag_ofs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frag_ofs_)));
          set_has_frag_ofs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ttl;
        break;
      }
      
      // optional uint32 ttl = 11 [default = 127];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_proto;
        break;
      }
      
      // optional uint32 proto = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proto_)));
          set_has_proto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cksum;
        break;
      }
      
      // optional uint32 cksum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cksum_)));
          set_has_cksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_src_ip;
        break;
      }
      
      // optional fixed32 src_ip = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_src_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &src_ip_)));
          set_has_src_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_src_ip_mode;
        break;
      }
      
      // optional .OstProto.Ip4.IpAddrMode src_ip_mode = 15 [default = e_im_fixed];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_ip_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OstProto::Ip4_IpAddrMode_IsValid(value)) {
            set_src_ip_mode(static_cast< ::OstProto::Ip4_IpAddrMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_src_ip_count;
        break;
      }
      
      // optional uint32 src_ip_count = 16 [default = 16];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_ip_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_ip_count_)));
          set_has_src_ip_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_src_ip_mask;
        break;
      }
      
      // optional fixed32 src_ip_mask = 17 [default = 4294967040];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_src_ip_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &src_ip_mask_)));
          set_has_src_ip_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_dst_ip;
        break;
      }
      
      // optional fixed32 dst_ip = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dst_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dst_ip_)));
          set_has_dst_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_dst_ip_mode;
        break;
      }
      
      // optional .OstProto.Ip4.IpAddrMode dst_ip_mode = 19 [default = e_im_fixed];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_ip_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OstProto::Ip4_IpAddrMode_IsValid(value)) {
            set_dst_ip_mode(static_cast< ::OstProto::Ip4_IpAddrMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_dst_ip_count;
        break;
      }
      
      // optional uint32 dst_ip_count = 20 [default = 16];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_ip_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_ip_count_)));
          set_has_dst_ip_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_dst_ip_mask;
        break;
      }
      
      // optional fixed32 dst_ip_mask = 21 [default = 4294967040];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dst_ip_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dst_ip_mask_)));
          set_has_dst_ip_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_is_override_proto;
        break;
      }
      
      // optional bool is_override_proto = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_proto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_proto_)));
          set_has_is_override_proto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ip4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_override_ver = 1;
  if (has_is_override_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_override_ver(), output);
  }
  
  // optional bool is_override_hdrlen = 2;
  if (has_is_override_hdrlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_override_hdrlen(), output);
  }
  
  // optional bool is_override_totlen = 3;
  if (has_is_override_totlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_override_totlen(), output);
  }
  
  // optional bool is_override_cksum = 4;
  if (has_is_override_cksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_override_cksum(), output);
  }
  
  // optional uint32 ver_hdrlen = 5 [default = 69];
  if (has_ver_hdrlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ver_hdrlen(), output);
  }
  
  // optional uint32 tos = 6;
  if (has_tos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tos(), output);
  }
  
  // optional uint32 totlen = 7;
  if (has_totlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->totlen(), output);
  }
  
  // optional uint32 id = 8 [default = 1234];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->id(), output);
  }
  
  // optional uint32 flags = 9;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->flags(), output);
  }
  
  // optional uint32 frag_ofs = 10;
  if (has_frag_ofs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->frag_ofs(), output);
  }
  
  // optional uint32 ttl = 11 [default = 127];
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ttl(), output);
  }
  
  // optional uint32 proto = 12;
  if (has_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->proto(), output);
  }
  
  // optional uint32 cksum = 13;
  if (has_cksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cksum(), output);
  }
  
  // optional fixed32 src_ip = 14;
  if (has_src_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->src_ip(), output);
  }
  
  // optional .OstProto.Ip4.IpAddrMode src_ip_mode = 15 [default = e_im_fixed];
  if (has_src_ip_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->src_ip_mode(), output);
  }
  
  // optional uint32 src_ip_count = 16 [default = 16];
  if (has_src_ip_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->src_ip_count(), output);
  }
  
  // optional fixed32 src_ip_mask = 17 [default = 4294967040];
  if (has_src_ip_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(17, this->src_ip_mask(), output);
  }
  
  // optional fixed32 dst_ip = 18;
  if (has_dst_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(18, this->dst_ip(), output);
  }
  
  // optional .OstProto.Ip4.IpAddrMode dst_ip_mode = 19 [default = e_im_fixed];
  if (has_dst_ip_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->dst_ip_mode(), output);
  }
  
  // optional uint32 dst_ip_count = 20 [default = 16];
  if (has_dst_ip_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->dst_ip_count(), output);
  }
  
  // optional fixed32 dst_ip_mask = 21 [default = 4294967040];
  if (has_dst_ip_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(21, this->dst_ip_mask(), output);
  }
  
  // optional bool is_override_proto = 30;
  if (has_is_override_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->is_override_proto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ip4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_override_ver = 1;
  if (has_is_override_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_override_ver(), target);
  }
  
  // optional bool is_override_hdrlen = 2;
  if (has_is_override_hdrlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_override_hdrlen(), target);
  }
  
  // optional bool is_override_totlen = 3;
  if (has_is_override_totlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_override_totlen(), target);
  }
  
  // optional bool is_override_cksum = 4;
  if (has_is_override_cksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_override_cksum(), target);
  }
  
  // optional uint32 ver_hdrlen = 5 [default = 69];
  if (has_ver_hdrlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ver_hdrlen(), target);
  }
  
  // optional uint32 tos = 6;
  if (has_tos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tos(), target);
  }
  
  // optional uint32 totlen = 7;
  if (has_totlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->totlen(), target);
  }
  
  // optional uint32 id = 8 [default = 1234];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->id(), target);
  }
  
  // optional uint32 flags = 9;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->flags(), target);
  }
  
  // optional uint32 frag_ofs = 10;
  if (has_frag_ofs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->frag_ofs(), target);
  }
  
  // optional uint32 ttl = 11 [default = 127];
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ttl(), target);
  }
  
  // optional uint32 proto = 12;
  if (has_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->proto(), target);
  }
  
  // optional uint32 cksum = 13;
  if (has_cksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cksum(), target);
  }
  
  // optional fixed32 src_ip = 14;
  if (has_src_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->src_ip(), target);
  }
  
  // optional .OstProto.Ip4.IpAddrMode src_ip_mode = 15 [default = e_im_fixed];
  if (has_src_ip_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->src_ip_mode(), target);
  }
  
  // optional uint32 src_ip_count = 16 [default = 16];
  if (has_src_ip_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->src_ip_count(), target);
  }
  
  // optional fixed32 src_ip_mask = 17 [default = 4294967040];
  if (has_src_ip_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(17, this->src_ip_mask(), target);
  }
  
  // optional fixed32 dst_ip = 18;
  if (has_dst_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(18, this->dst_ip(), target);
  }
  
  // optional .OstProto.Ip4.IpAddrMode dst_ip_mode = 19 [default = e_im_fixed];
  if (has_dst_ip_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->dst_ip_mode(), target);
  }
  
  // optional uint32 dst_ip_count = 20 [default = 16];
  if (has_dst_ip_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->dst_ip_count(), target);
  }
  
  // optional fixed32 dst_ip_mask = 21 [default = 4294967040];
  if (has_dst_ip_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(21, this->dst_ip_mask(), target);
  }
  
  // optional bool is_override_proto = 30;
  if (has_is_override_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->is_override_proto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ip4::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_override_ver = 1;
    if (has_is_override_ver()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_override_hdrlen = 2;
    if (has_is_override_hdrlen()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_override_totlen = 3;
    if (has_is_override_totlen()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_override_proto = 30;
    if (has_is_override_proto()) {
      total_size += 2 + 1;
    }
    
    // optional bool is_override_cksum = 4;
    if (has_is_override_cksum()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 ver_hdrlen = 5 [default = 69];
    if (has_ver_hdrlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver_hdrlen());
    }
    
    // optional uint32 tos = 6;
    if (has_tos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tos());
    }
    
    // optional uint32 totlen = 7;
    if (has_totlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totlen());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 id = 8 [default = 1234];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 flags = 9;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
    // optional uint32 frag_ofs = 10;
    if (has_frag_ofs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frag_ofs());
    }
    
    // optional uint32 ttl = 11 [default = 127];
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttl());
    }
    
    // optional uint32 proto = 12;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proto());
    }
    
    // optional uint32 cksum = 13;
    if (has_cksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cksum());
    }
    
    // optional fixed32 src_ip = 14;
    if (has_src_ip()) {
      total_size += 1 + 4;
    }
    
    // optional .OstProto.Ip4.IpAddrMode src_ip_mode = 15 [default = e_im_fixed];
    if (has_src_ip_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_ip_mode());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 src_ip_count = 16 [default = 16];
    if (has_src_ip_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_ip_count());
    }
    
    // optional fixed32 src_ip_mask = 17 [default = 4294967040];
    if (has_src_ip_mask()) {
      total_size += 2 + 4;
    }
    
    // optional fixed32 dst_ip = 18;
    if (has_dst_ip()) {
      total_size += 2 + 4;
    }
    
    // optional .OstProto.Ip4.IpAddrMode dst_ip_mode = 19 [default = e_im_fixed];
    if (has_dst_ip_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dst_ip_mode());
    }
    
    // optional uint32 dst_ip_count = 20 [default = 16];
    if (has_dst_ip_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_ip_count());
    }
    
    // optional fixed32 dst_ip_mask = 21 [default = 4294967040];
    if (has_dst_ip_mask()) {
      total_size += 2 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ip4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ip4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ip4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ip4::MergeFrom(const Ip4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_override_ver()) {
      set_is_override_ver(from.is_override_ver());
    }
    if (from.has_is_override_hdrlen()) {
      set_is_override_hdrlen(from.is_override_hdrlen());
    }
    if (from.has_is_override_totlen()) {
      set_is_override_totlen(from.is_override_totlen());
    }
    if (from.has_is_override_proto()) {
      set_is_override_proto(from.is_override_proto());
    }
    if (from.has_is_override_cksum()) {
      set_is_override_cksum(from.is_override_cksum());
    }
    if (from.has_ver_hdrlen()) {
      set_ver_hdrlen(from.ver_hdrlen());
    }
    if (from.has_tos()) {
      set_tos(from.tos());
    }
    if (from.has_totlen()) {
      set_totlen(from.totlen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_frag_ofs()) {
      set_frag_ofs(from.frag_ofs());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_proto()) {
      set_proto(from.proto());
    }
    if (from.has_cksum()) {
      set_cksum(from.cksum());
    }
    if (from.has_src_ip()) {
      set_src_ip(from.src_ip());
    }
    if (from.has_src_ip_mode()) {
      set_src_ip_mode(from.src_ip_mode());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_src_ip_count()) {
      set_src_ip_count(from.src_ip_count());
    }
    if (from.has_src_ip_mask()) {
      set_src_ip_mask(from.src_ip_mask());
    }
    if (from.has_dst_ip()) {
      set_dst_ip(from.dst_ip());
    }
    if (from.has_dst_ip_mode()) {
      set_dst_ip_mode(from.dst_ip_mode());
    }
    if (from.has_dst_ip_count()) {
      set_dst_ip_count(from.dst_ip_count());
    }
    if (from.has_dst_ip_mask()) {
      set_dst_ip_mask(from.dst_ip_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ip4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ip4::CopyFrom(const Ip4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ip4::IsInitialized() const {
  
  return true;
}

void Ip4::Swap(Ip4* other) {
  if (other != this) {
    std::swap(is_override_ver_, other->is_override_ver_);
    std::swap(is_override_hdrlen_, other->is_override_hdrlen_);
    std::swap(is_override_totlen_, other->is_override_totlen_);
    std::swap(is_override_proto_, other->is_override_proto_);
    std::swap(is_override_cksum_, other->is_override_cksum_);
    std::swap(ver_hdrlen_, other->ver_hdrlen_);
    std::swap(tos_, other->tos_);
    std::swap(totlen_, other->totlen_);
    std::swap(id_, other->id_);
    std::swap(flags_, other->flags_);
    std::swap(frag_ofs_, other->frag_ofs_);
    std::swap(ttl_, other->ttl_);
    std::swap(proto_, other->proto_);
    std::swap(cksum_, other->cksum_);
    std::swap(src_ip_, other->src_ip_);
    std::swap(src_ip_mode_, other->src_ip_mode_);
    std::swap(src_ip_count_, other->src_ip_count_);
    std::swap(src_ip_mask_, other->src_ip_mask_);
    std::swap(dst_ip_, other->dst_ip_);
    std::swap(dst_ip_mode_, other->dst_ip_mode_);
    std::swap(dst_ip_count_, other->dst_ip_count_);
    std::swap(dst_ip_mask_, other->dst_ip_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ip4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ip4_descriptor_;
  metadata.reflection = Ip4_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Ip4 >, 11, false >
  ip4(kIp4FieldNumber, ::OstProto::Ip4::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

// @@protoc_insertion_point(global_scope)
