// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gmp.proto

#ifndef PROTOBUF_gmp_2eproto__INCLUDED
#define PROTOBUF_gmp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "protocol.pb.h"
// @@protoc_insertion_point(includes)

namespace OstProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gmp_2eproto();
void protobuf_AssignDesc_gmp_2eproto();
void protobuf_ShutdownFile_gmp_2eproto();

class Gmp;
class Gmp_IpAddress;
class Gmp_GroupRecord;

enum Gmp_GroupRecord_RecordType {
  Gmp_GroupRecord_RecordType_kReserved = 0,
  Gmp_GroupRecord_RecordType_kIsInclude = 1,
  Gmp_GroupRecord_RecordType_kIsExclude = 2,
  Gmp_GroupRecord_RecordType_kToInclude = 3,
  Gmp_GroupRecord_RecordType_kToExclude = 4,
  Gmp_GroupRecord_RecordType_kAllowNew = 5,
  Gmp_GroupRecord_RecordType_kBlockOld = 6
};
bool Gmp_GroupRecord_RecordType_IsValid(int value);
const Gmp_GroupRecord_RecordType Gmp_GroupRecord_RecordType_RecordType_MIN = Gmp_GroupRecord_RecordType_kReserved;
const Gmp_GroupRecord_RecordType Gmp_GroupRecord_RecordType_RecordType_MAX = Gmp_GroupRecord_RecordType_kBlockOld;
const int Gmp_GroupRecord_RecordType_RecordType_ARRAYSIZE = Gmp_GroupRecord_RecordType_RecordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gmp_GroupRecord_RecordType_descriptor();
inline const ::std::string& Gmp_GroupRecord_RecordType_Name(Gmp_GroupRecord_RecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gmp_GroupRecord_RecordType_descriptor(), value);
}
inline bool Gmp_GroupRecord_RecordType_Parse(
    const ::std::string& name, Gmp_GroupRecord_RecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gmp_GroupRecord_RecordType>(
    Gmp_GroupRecord_RecordType_descriptor(), name, value);
}
enum Gmp_GroupMode {
  Gmp_GroupMode_kFixed = 0,
  Gmp_GroupMode_kIncrementGroup = 1,
  Gmp_GroupMode_kDecrementGroup = 2,
  Gmp_GroupMode_kRandomGroup = 3
};
bool Gmp_GroupMode_IsValid(int value);
const Gmp_GroupMode Gmp_GroupMode_GroupMode_MIN = Gmp_GroupMode_kFixed;
const Gmp_GroupMode Gmp_GroupMode_GroupMode_MAX = Gmp_GroupMode_kRandomGroup;
const int Gmp_GroupMode_GroupMode_ARRAYSIZE = Gmp_GroupMode_GroupMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gmp_GroupMode_descriptor();
inline const ::std::string& Gmp_GroupMode_Name(Gmp_GroupMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gmp_GroupMode_descriptor(), value);
}
inline bool Gmp_GroupMode_Parse(
    const ::std::string& name, Gmp_GroupMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gmp_GroupMode>(
    Gmp_GroupMode_descriptor(), name, value);
}
// ===================================================================

class Gmp_IpAddress : public ::google::protobuf::Message {
 public:
  Gmp_IpAddress();
  virtual ~Gmp_IpAddress();
  
  Gmp_IpAddress(const Gmp_IpAddress& from);
  
  inline Gmp_IpAddress& operator=(const Gmp_IpAddress& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gmp_IpAddress& default_instance();
  
  void Swap(Gmp_IpAddress* other);
  
  // implements Message ----------------------------------------------
  
  Gmp_IpAddress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Gmp_IpAddress& from);
  void MergeFrom(const Gmp_IpAddress& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed32 v4 = 1;
  inline bool has_v4() const;
  inline void clear_v4();
  static const int kV4FieldNumber = 1;
  inline ::google::protobuf::uint32 v4() const;
  inline void set_v4(::google::protobuf::uint32 value);
  
  // optional fixed64 v6_hi = 2;
  inline bool has_v6_hi() const;
  inline void clear_v6_hi();
  static const int kV6HiFieldNumber = 2;
  inline ::google::protobuf::uint64 v6_hi() const;
  inline void set_v6_hi(::google::protobuf::uint64 value);
  
  // optional fixed64 v6_lo = 3;
  inline bool has_v6_lo() const;
  inline void clear_v6_lo();
  static const int kV6LoFieldNumber = 3;
  inline ::google::protobuf::uint64 v6_lo() const;
  inline void set_v6_lo(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:OstProto.Gmp.IpAddress)
 private:
  inline void set_has_v4();
  inline void clear_has_v4();
  inline void set_has_v6_hi();
  inline void clear_has_v6_hi();
  inline void set_has_v6_lo();
  inline void clear_has_v6_lo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 v6_hi_;
  ::google::protobuf::uint64 v6_lo_;
  ::google::protobuf::uint32 v4_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_gmp_2eproto();
  friend void protobuf_AssignDesc_gmp_2eproto();
  friend void protobuf_ShutdownFile_gmp_2eproto();
  
  void InitAsDefaultInstance();
  static Gmp_IpAddress* default_instance_;
};
// -------------------------------------------------------------------

class Gmp_GroupRecord : public ::google::protobuf::Message {
 public:
  Gmp_GroupRecord();
  virtual ~Gmp_GroupRecord();
  
  Gmp_GroupRecord(const Gmp_GroupRecord& from);
  
  inline Gmp_GroupRecord& operator=(const Gmp_GroupRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gmp_GroupRecord& default_instance();
  
  void Swap(Gmp_GroupRecord* other);
  
  // implements Message ----------------------------------------------
  
  Gmp_GroupRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Gmp_GroupRecord& from);
  void MergeFrom(const Gmp_GroupRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Gmp_GroupRecord_RecordType RecordType;
  static const RecordType kReserved = Gmp_GroupRecord_RecordType_kReserved;
  static const RecordType kIsInclude = Gmp_GroupRecord_RecordType_kIsInclude;
  static const RecordType kIsExclude = Gmp_GroupRecord_RecordType_kIsExclude;
  static const RecordType kToInclude = Gmp_GroupRecord_RecordType_kToInclude;
  static const RecordType kToExclude = Gmp_GroupRecord_RecordType_kToExclude;
  static const RecordType kAllowNew = Gmp_GroupRecord_RecordType_kAllowNew;
  static const RecordType kBlockOld = Gmp_GroupRecord_RecordType_kBlockOld;
  static inline bool RecordType_IsValid(int value) {
    return Gmp_GroupRecord_RecordType_IsValid(value);
  }
  static const RecordType RecordType_MIN =
    Gmp_GroupRecord_RecordType_RecordType_MIN;
  static const RecordType RecordType_MAX =
    Gmp_GroupRecord_RecordType_RecordType_MAX;
  static const int RecordType_ARRAYSIZE =
    Gmp_GroupRecord_RecordType_RecordType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RecordType_descriptor() {
    return Gmp_GroupRecord_RecordType_descriptor();
  }
  static inline const ::std::string& RecordType_Name(RecordType value) {
    return Gmp_GroupRecord_RecordType_Name(value);
  }
  static inline bool RecordType_Parse(const ::std::string& name,
      RecordType* value) {
    return Gmp_GroupRecord_RecordType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .OstProto.Gmp.GroupRecord.RecordType type = 1 [default = kIsInclude];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::OstProto::Gmp_GroupRecord_RecordType type() const;
  inline void set_type(::OstProto::Gmp_GroupRecord_RecordType value);
  
  // optional .OstProto.Gmp.IpAddress group_address = 2;
  inline bool has_group_address() const;
  inline void clear_group_address();
  static const int kGroupAddressFieldNumber = 2;
  inline const ::OstProto::Gmp_IpAddress& group_address() const;
  inline ::OstProto::Gmp_IpAddress* mutable_group_address();
  inline ::OstProto::Gmp_IpAddress* release_group_address();
  
  // repeated .OstProto.Gmp.IpAddress sources = 3;
  inline int sources_size() const;
  inline void clear_sources();
  static const int kSourcesFieldNumber = 3;
  inline const ::OstProto::Gmp_IpAddress& sources(int index) const;
  inline ::OstProto::Gmp_IpAddress* mutable_sources(int index);
  inline ::OstProto::Gmp_IpAddress* add_sources();
  inline const ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_IpAddress >&
      sources() const;
  inline ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_IpAddress >*
      mutable_sources();
  
  // optional bool is_override_source_count = 4;
  inline bool has_is_override_source_count() const;
  inline void clear_is_override_source_count();
  static const int kIsOverrideSourceCountFieldNumber = 4;
  inline bool is_override_source_count() const;
  inline void set_is_override_source_count(bool value);
  
  // optional uint32 source_count = 5;
  inline bool has_source_count() const;
  inline void clear_source_count();
  static const int kSourceCountFieldNumber = 5;
  inline ::google::protobuf::uint32 source_count() const;
  inline void set_source_count(::google::protobuf::uint32 value);
  
  // optional bytes aux_data = 6;
  inline bool has_aux_data() const;
  inline void clear_aux_data();
  static const int kAuxDataFieldNumber = 6;
  inline const ::std::string& aux_data() const;
  inline void set_aux_data(const ::std::string& value);
  inline void set_aux_data(const char* value);
  inline void set_aux_data(const void* value, size_t size);
  inline ::std::string* mutable_aux_data();
  inline ::std::string* release_aux_data();
  
  // optional bool is_override_aux_data_length = 7;
  inline bool has_is_override_aux_data_length() const;
  inline void clear_is_override_aux_data_length();
  static const int kIsOverrideAuxDataLengthFieldNumber = 7;
  inline bool is_override_aux_data_length() const;
  inline void set_is_override_aux_data_length(bool value);
  
  // optional uint32 aux_data_length = 8;
  inline bool has_aux_data_length() const;
  inline void clear_aux_data_length();
  static const int kAuxDataLengthFieldNumber = 8;
  inline ::google::protobuf::uint32 aux_data_length() const;
  inline void set_aux_data_length(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:OstProto.Gmp.GroupRecord)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_group_address();
  inline void clear_has_group_address();
  inline void set_has_is_override_source_count();
  inline void clear_has_is_override_source_count();
  inline void set_has_source_count();
  inline void clear_has_source_count();
  inline void set_has_aux_data();
  inline void clear_has_aux_data();
  inline void set_has_is_override_aux_data_length();
  inline void clear_has_is_override_aux_data_length();
  inline void set_has_aux_data_length();
  inline void clear_has_aux_data_length();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::OstProto::Gmp_IpAddress* group_address_;
  ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_IpAddress > sources_;
  int type_;
  ::google::protobuf::uint32 source_count_;
  ::std::string* aux_data_;
  bool is_override_source_count_;
  bool is_override_aux_data_length_;
  ::google::protobuf::uint32 aux_data_length_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_gmp_2eproto();
  friend void protobuf_AssignDesc_gmp_2eproto();
  friend void protobuf_ShutdownFile_gmp_2eproto();
  
  void InitAsDefaultInstance();
  static Gmp_GroupRecord* default_instance_;
};
// -------------------------------------------------------------------

class Gmp : public ::google::protobuf::Message {
 public:
  Gmp();
  virtual ~Gmp();
  
  Gmp(const Gmp& from);
  
  inline Gmp& operator=(const Gmp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gmp& default_instance();
  
  void Swap(Gmp* other);
  
  // implements Message ----------------------------------------------
  
  Gmp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Gmp& from);
  void MergeFrom(const Gmp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Gmp_IpAddress IpAddress;
  typedef Gmp_GroupRecord GroupRecord;
  
  typedef Gmp_GroupMode GroupMode;
  static const GroupMode kFixed = Gmp_GroupMode_kFixed;
  static const GroupMode kIncrementGroup = Gmp_GroupMode_kIncrementGroup;
  static const GroupMode kDecrementGroup = Gmp_GroupMode_kDecrementGroup;
  static const GroupMode kRandomGroup = Gmp_GroupMode_kRandomGroup;
  static inline bool GroupMode_IsValid(int value) {
    return Gmp_GroupMode_IsValid(value);
  }
  static const GroupMode GroupMode_MIN =
    Gmp_GroupMode_GroupMode_MIN;
  static const GroupMode GroupMode_MAX =
    Gmp_GroupMode_GroupMode_MAX;
  static const int GroupMode_ARRAYSIZE =
    Gmp_GroupMode_GroupMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GroupMode_descriptor() {
    return Gmp_GroupMode_descriptor();
  }
  static inline const ::std::string& GroupMode_Name(GroupMode value) {
    return Gmp_GroupMode_Name(value);
  }
  static inline bool GroupMode_Parse(const ::std::string& name,
      GroupMode* value) {
    return Gmp_GroupMode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional bool is_override_rsvd_code = 2;
  inline bool has_is_override_rsvd_code() const;
  inline void clear_is_override_rsvd_code();
  static const int kIsOverrideRsvdCodeFieldNumber = 2;
  inline bool is_override_rsvd_code() const;
  inline void set_is_override_rsvd_code(bool value);
  
  // optional uint32 rsvd_code = 3;
  inline bool has_rsvd_code() const;
  inline void clear_rsvd_code();
  static const int kRsvdCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 rsvd_code() const;
  inline void set_rsvd_code(::google::protobuf::uint32 value);
  
  // optional uint32 max_response_time = 4 [default = 100];
  inline bool has_max_response_time() const;
  inline void clear_max_response_time();
  static const int kMaxResponseTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 max_response_time() const;
  inline void set_max_response_time(::google::protobuf::uint32 value);
  
  // optional bool is_override_checksum = 5;
  inline bool has_is_override_checksum() const;
  inline void clear_is_override_checksum();
  static const int kIsOverrideChecksumFieldNumber = 5;
  inline bool is_override_checksum() const;
  inline void set_is_override_checksum(bool value);
  
  // optional uint32 checksum = 6;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 6;
  inline ::google::protobuf::uint32 checksum() const;
  inline void set_checksum(::google::protobuf::uint32 value);
  
  // optional .OstProto.Gmp.IpAddress group_address = 10;
  inline bool has_group_address() const;
  inline void clear_group_address();
  static const int kGroupAddressFieldNumber = 10;
  inline const ::OstProto::Gmp_IpAddress& group_address() const;
  inline ::OstProto::Gmp_IpAddress* mutable_group_address();
  inline ::OstProto::Gmp_IpAddress* release_group_address();
  
  // optional .OstProto.Gmp.GroupMode group_mode = 11 [default = kFixed];
  inline bool has_group_mode() const;
  inline void clear_group_mode();
  static const int kGroupModeFieldNumber = 11;
  inline ::OstProto::Gmp_GroupMode group_mode() const;
  inline void set_group_mode(::OstProto::Gmp_GroupMode value);
  
  // optional uint32 group_count = 12 [default = 16];
  inline bool has_group_count() const;
  inline void clear_group_count();
  static const int kGroupCountFieldNumber = 12;
  inline ::google::protobuf::uint32 group_count() const;
  inline void set_group_count(::google::protobuf::uint32 value);
  
  // optional uint32 group_prefix = 13 [default = 24];
  inline bool has_group_prefix() const;
  inline void clear_group_prefix();
  static const int kGroupPrefixFieldNumber = 13;
  inline ::google::protobuf::uint32 group_prefix() const;
  inline void set_group_prefix(::google::protobuf::uint32 value);
  
  // optional bool s_flag = 20;
  inline bool has_s_flag() const;
  inline void clear_s_flag();
  static const int kSFlagFieldNumber = 20;
  inline bool s_flag() const;
  inline void set_s_flag(bool value);
  
  // optional uint32 qrv = 21 [default = 2];
  inline bool has_qrv() const;
  inline void clear_qrv();
  static const int kQrvFieldNumber = 21;
  inline ::google::protobuf::uint32 qrv() const;
  inline void set_qrv(::google::protobuf::uint32 value);
  
  // optional uint32 qqi = 22 [default = 125];
  inline bool has_qqi() const;
  inline void clear_qqi();
  static const int kQqiFieldNumber = 22;
  inline ::google::protobuf::uint32 qqi() const;
  inline void set_qqi(::google::protobuf::uint32 value);
  
  // repeated .OstProto.Gmp.IpAddress sources = 23;
  inline int sources_size() const;
  inline void clear_sources();
  static const int kSourcesFieldNumber = 23;
  inline const ::OstProto::Gmp_IpAddress& sources(int index) const;
  inline ::OstProto::Gmp_IpAddress* mutable_sources(int index);
  inline ::OstProto::Gmp_IpAddress* add_sources();
  inline const ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_IpAddress >&
      sources() const;
  inline ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_IpAddress >*
      mutable_sources();
  
  // optional bool is_override_source_count = 24;
  inline bool has_is_override_source_count() const;
  inline void clear_is_override_source_count();
  static const int kIsOverrideSourceCountFieldNumber = 24;
  inline bool is_override_source_count() const;
  inline void set_is_override_source_count(bool value);
  
  // optional uint32 source_count = 25;
  inline bool has_source_count() const;
  inline void clear_source_count();
  static const int kSourceCountFieldNumber = 25;
  inline ::google::protobuf::uint32 source_count() const;
  inline void set_source_count(::google::protobuf::uint32 value);
  
  // repeated .OstProto.Gmp.GroupRecord group_records = 30;
  inline int group_records_size() const;
  inline void clear_group_records();
  static const int kGroupRecordsFieldNumber = 30;
  inline const ::OstProto::Gmp_GroupRecord& group_records(int index) const;
  inline ::OstProto::Gmp_GroupRecord* mutable_group_records(int index);
  inline ::OstProto::Gmp_GroupRecord* add_group_records();
  inline const ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_GroupRecord >&
      group_records() const;
  inline ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_GroupRecord >*
      mutable_group_records();
  
  // optional bool is_override_group_record_count = 31;
  inline bool has_is_override_group_record_count() const;
  inline void clear_is_override_group_record_count();
  static const int kIsOverrideGroupRecordCountFieldNumber = 31;
  inline bool is_override_group_record_count() const;
  inline void set_is_override_group_record_count(bool value);
  
  // optional uint32 group_record_count = 32;
  inline bool has_group_record_count() const;
  inline void clear_group_record_count();
  static const int kGroupRecordCountFieldNumber = 32;
  inline ::google::protobuf::uint32 group_record_count() const;
  inline void set_group_record_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:OstProto.Gmp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_override_rsvd_code();
  inline void clear_has_is_override_rsvd_code();
  inline void set_has_rsvd_code();
  inline void clear_has_rsvd_code();
  inline void set_has_max_response_time();
  inline void clear_has_max_response_time();
  inline void set_has_is_override_checksum();
  inline void clear_has_is_override_checksum();
  inline void set_has_checksum();
  inline void clear_has_checksum();
  inline void set_has_group_address();
  inline void clear_has_group_address();
  inline void set_has_group_mode();
  inline void clear_has_group_mode();
  inline void set_has_group_count();
  inline void clear_has_group_count();
  inline void set_has_group_prefix();
  inline void clear_has_group_prefix();
  inline void set_has_s_flag();
  inline void clear_has_s_flag();
  inline void set_has_qrv();
  inline void clear_has_qrv();
  inline void set_has_qqi();
  inline void clear_has_qqi();
  inline void set_has_is_override_source_count();
  inline void clear_has_is_override_source_count();
  inline void set_has_source_count();
  inline void clear_has_source_count();
  inline void set_has_is_override_group_record_count();
  inline void clear_has_is_override_group_record_count();
  inline void set_has_group_record_count();
  inline void clear_has_group_record_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 rsvd_code_;
  ::google::protobuf::uint32 max_response_time_;
  ::google::protobuf::uint32 checksum_;
  ::OstProto::Gmp_IpAddress* group_address_;
  int group_mode_;
  bool is_override_rsvd_code_;
  bool is_override_checksum_;
  bool s_flag_;
  bool is_override_source_count_;
  ::google::protobuf::uint32 group_count_;
  ::google::protobuf::uint32 group_prefix_;
  ::google::protobuf::uint32 qrv_;
  ::google::protobuf::uint32 qqi_;
  ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_IpAddress > sources_;
  ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_GroupRecord > group_records_;
  ::google::protobuf::uint32 source_count_;
  bool is_override_group_record_count_;
  ::google::protobuf::uint32 group_record_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_gmp_2eproto();
  friend void protobuf_AssignDesc_gmp_2eproto();
  friend void protobuf_ShutdownFile_gmp_2eproto();
  
  void InitAsDefaultInstance();
  static Gmp* default_instance_;
};
// ===================================================================


// ===================================================================

// Gmp_IpAddress

// optional fixed32 v4 = 1;
inline bool Gmp_IpAddress::has_v4() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gmp_IpAddress::set_has_v4() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gmp_IpAddress::clear_has_v4() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gmp_IpAddress::clear_v4() {
  v4_ = 0u;
  clear_has_v4();
}
inline ::google::protobuf::uint32 Gmp_IpAddress::v4() const {
  return v4_;
}
inline void Gmp_IpAddress::set_v4(::google::protobuf::uint32 value) {
  set_has_v4();
  v4_ = value;
}

// optional fixed64 v6_hi = 2;
inline bool Gmp_IpAddress::has_v6_hi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gmp_IpAddress::set_has_v6_hi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gmp_IpAddress::clear_has_v6_hi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gmp_IpAddress::clear_v6_hi() {
  v6_hi_ = GOOGLE_ULONGLONG(0);
  clear_has_v6_hi();
}
inline ::google::protobuf::uint64 Gmp_IpAddress::v6_hi() const {
  return v6_hi_;
}
inline void Gmp_IpAddress::set_v6_hi(::google::protobuf::uint64 value) {
  set_has_v6_hi();
  v6_hi_ = value;
}

// optional fixed64 v6_lo = 3;
inline bool Gmp_IpAddress::has_v6_lo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gmp_IpAddress::set_has_v6_lo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gmp_IpAddress::clear_has_v6_lo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gmp_IpAddress::clear_v6_lo() {
  v6_lo_ = GOOGLE_ULONGLONG(0);
  clear_has_v6_lo();
}
inline ::google::protobuf::uint64 Gmp_IpAddress::v6_lo() const {
  return v6_lo_;
}
inline void Gmp_IpAddress::set_v6_lo(::google::protobuf::uint64 value) {
  set_has_v6_lo();
  v6_lo_ = value;
}

// -------------------------------------------------------------------

// Gmp_GroupRecord

// optional .OstProto.Gmp.GroupRecord.RecordType type = 1 [default = kIsInclude];
inline bool Gmp_GroupRecord::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gmp_GroupRecord::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gmp_GroupRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gmp_GroupRecord::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::OstProto::Gmp_GroupRecord_RecordType Gmp_GroupRecord::type() const {
  return static_cast< ::OstProto::Gmp_GroupRecord_RecordType >(type_);
}
inline void Gmp_GroupRecord::set_type(::OstProto::Gmp_GroupRecord_RecordType value) {
  GOOGLE_DCHECK(::OstProto::Gmp_GroupRecord_RecordType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .OstProto.Gmp.IpAddress group_address = 2;
inline bool Gmp_GroupRecord::has_group_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gmp_GroupRecord::set_has_group_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gmp_GroupRecord::clear_has_group_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gmp_GroupRecord::clear_group_address() {
  if (group_address_ != NULL) group_address_->::OstProto::Gmp_IpAddress::Clear();
  clear_has_group_address();
}
inline const ::OstProto::Gmp_IpAddress& Gmp_GroupRecord::group_address() const {
  return group_address_ != NULL ? *group_address_ : *default_instance_->group_address_;
}
inline ::OstProto::Gmp_IpAddress* Gmp_GroupRecord::mutable_group_address() {
  set_has_group_address();
  if (group_address_ == NULL) group_address_ = new ::OstProto::Gmp_IpAddress;
  return group_address_;
}
inline ::OstProto::Gmp_IpAddress* Gmp_GroupRecord::release_group_address() {
  clear_has_group_address();
  ::OstProto::Gmp_IpAddress* temp = group_address_;
  group_address_ = NULL;
  return temp;
}

// repeated .OstProto.Gmp.IpAddress sources = 3;
inline int Gmp_GroupRecord::sources_size() const {
  return sources_.size();
}
inline void Gmp_GroupRecord::clear_sources() {
  sources_.Clear();
}
inline const ::OstProto::Gmp_IpAddress& Gmp_GroupRecord::sources(int index) const {
  return sources_.Get(index);
}
inline ::OstProto::Gmp_IpAddress* Gmp_GroupRecord::mutable_sources(int index) {
  return sources_.Mutable(index);
}
inline ::OstProto::Gmp_IpAddress* Gmp_GroupRecord::add_sources() {
  return sources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_IpAddress >&
Gmp_GroupRecord::sources() const {
  return sources_;
}
inline ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_IpAddress >*
Gmp_GroupRecord::mutable_sources() {
  return &sources_;
}

// optional bool is_override_source_count = 4;
inline bool Gmp_GroupRecord::has_is_override_source_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gmp_GroupRecord::set_has_is_override_source_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gmp_GroupRecord::clear_has_is_override_source_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gmp_GroupRecord::clear_is_override_source_count() {
  is_override_source_count_ = false;
  clear_has_is_override_source_count();
}
inline bool Gmp_GroupRecord::is_override_source_count() const {
  return is_override_source_count_;
}
inline void Gmp_GroupRecord::set_is_override_source_count(bool value) {
  set_has_is_override_source_count();
  is_override_source_count_ = value;
}

// optional uint32 source_count = 5;
inline bool Gmp_GroupRecord::has_source_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gmp_GroupRecord::set_has_source_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gmp_GroupRecord::clear_has_source_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gmp_GroupRecord::clear_source_count() {
  source_count_ = 0u;
  clear_has_source_count();
}
inline ::google::protobuf::uint32 Gmp_GroupRecord::source_count() const {
  return source_count_;
}
inline void Gmp_GroupRecord::set_source_count(::google::protobuf::uint32 value) {
  set_has_source_count();
  source_count_ = value;
}

// optional bytes aux_data = 6;
inline bool Gmp_GroupRecord::has_aux_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gmp_GroupRecord::set_has_aux_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gmp_GroupRecord::clear_has_aux_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gmp_GroupRecord::clear_aux_data() {
  if (aux_data_ != &::google::protobuf::internal::kEmptyString) {
    aux_data_->clear();
  }
  clear_has_aux_data();
}
inline const ::std::string& Gmp_GroupRecord::aux_data() const {
  return *aux_data_;
}
inline void Gmp_GroupRecord::set_aux_data(const ::std::string& value) {
  set_has_aux_data();
  if (aux_data_ == &::google::protobuf::internal::kEmptyString) {
    aux_data_ = new ::std::string;
  }
  aux_data_->assign(value);
}
inline void Gmp_GroupRecord::set_aux_data(const char* value) {
  set_has_aux_data();
  if (aux_data_ == &::google::protobuf::internal::kEmptyString) {
    aux_data_ = new ::std::string;
  }
  aux_data_->assign(value);
}
inline void Gmp_GroupRecord::set_aux_data(const void* value, size_t size) {
  set_has_aux_data();
  if (aux_data_ == &::google::protobuf::internal::kEmptyString) {
    aux_data_ = new ::std::string;
  }
  aux_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Gmp_GroupRecord::mutable_aux_data() {
  set_has_aux_data();
  if (aux_data_ == &::google::protobuf::internal::kEmptyString) {
    aux_data_ = new ::std::string;
  }
  return aux_data_;
}
inline ::std::string* Gmp_GroupRecord::release_aux_data() {
  clear_has_aux_data();
  if (aux_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aux_data_;
    aux_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool is_override_aux_data_length = 7;
inline bool Gmp_GroupRecord::has_is_override_aux_data_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gmp_GroupRecord::set_has_is_override_aux_data_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gmp_GroupRecord::clear_has_is_override_aux_data_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gmp_GroupRecord::clear_is_override_aux_data_length() {
  is_override_aux_data_length_ = false;
  clear_has_is_override_aux_data_length();
}
inline bool Gmp_GroupRecord::is_override_aux_data_length() const {
  return is_override_aux_data_length_;
}
inline void Gmp_GroupRecord::set_is_override_aux_data_length(bool value) {
  set_has_is_override_aux_data_length();
  is_override_aux_data_length_ = value;
}

// optional uint32 aux_data_length = 8;
inline bool Gmp_GroupRecord::has_aux_data_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gmp_GroupRecord::set_has_aux_data_length() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gmp_GroupRecord::clear_has_aux_data_length() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gmp_GroupRecord::clear_aux_data_length() {
  aux_data_length_ = 0u;
  clear_has_aux_data_length();
}
inline ::google::protobuf::uint32 Gmp_GroupRecord::aux_data_length() const {
  return aux_data_length_;
}
inline void Gmp_GroupRecord::set_aux_data_length(::google::protobuf::uint32 value) {
  set_has_aux_data_length();
  aux_data_length_ = value;
}

// -------------------------------------------------------------------

// Gmp

// optional uint32 type = 1;
inline bool Gmp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gmp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gmp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gmp::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Gmp::type() const {
  return type_;
}
inline void Gmp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional bool is_override_rsvd_code = 2;
inline bool Gmp::has_is_override_rsvd_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gmp::set_has_is_override_rsvd_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gmp::clear_has_is_override_rsvd_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gmp::clear_is_override_rsvd_code() {
  is_override_rsvd_code_ = false;
  clear_has_is_override_rsvd_code();
}
inline bool Gmp::is_override_rsvd_code() const {
  return is_override_rsvd_code_;
}
inline void Gmp::set_is_override_rsvd_code(bool value) {
  set_has_is_override_rsvd_code();
  is_override_rsvd_code_ = value;
}

// optional uint32 rsvd_code = 3;
inline bool Gmp::has_rsvd_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gmp::set_has_rsvd_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gmp::clear_has_rsvd_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gmp::clear_rsvd_code() {
  rsvd_code_ = 0u;
  clear_has_rsvd_code();
}
inline ::google::protobuf::uint32 Gmp::rsvd_code() const {
  return rsvd_code_;
}
inline void Gmp::set_rsvd_code(::google::protobuf::uint32 value) {
  set_has_rsvd_code();
  rsvd_code_ = value;
}

// optional uint32 max_response_time = 4 [default = 100];
inline bool Gmp::has_max_response_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gmp::set_has_max_response_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gmp::clear_has_max_response_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gmp::clear_max_response_time() {
  max_response_time_ = 100u;
  clear_has_max_response_time();
}
inline ::google::protobuf::uint32 Gmp::max_response_time() const {
  return max_response_time_;
}
inline void Gmp::set_max_response_time(::google::protobuf::uint32 value) {
  set_has_max_response_time();
  max_response_time_ = value;
}

// optional bool is_override_checksum = 5;
inline bool Gmp::has_is_override_checksum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gmp::set_has_is_override_checksum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gmp::clear_has_is_override_checksum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gmp::clear_is_override_checksum() {
  is_override_checksum_ = false;
  clear_has_is_override_checksum();
}
inline bool Gmp::is_override_checksum() const {
  return is_override_checksum_;
}
inline void Gmp::set_is_override_checksum(bool value) {
  set_has_is_override_checksum();
  is_override_checksum_ = value;
}

// optional uint32 checksum = 6;
inline bool Gmp::has_checksum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gmp::set_has_checksum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gmp::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gmp::clear_checksum() {
  checksum_ = 0u;
  clear_has_checksum();
}
inline ::google::protobuf::uint32 Gmp::checksum() const {
  return checksum_;
}
inline void Gmp::set_checksum(::google::protobuf::uint32 value) {
  set_has_checksum();
  checksum_ = value;
}

// optional .OstProto.Gmp.IpAddress group_address = 10;
inline bool Gmp::has_group_address() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gmp::set_has_group_address() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gmp::clear_has_group_address() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gmp::clear_group_address() {
  if (group_address_ != NULL) group_address_->::OstProto::Gmp_IpAddress::Clear();
  clear_has_group_address();
}
inline const ::OstProto::Gmp_IpAddress& Gmp::group_address() const {
  return group_address_ != NULL ? *group_address_ : *default_instance_->group_address_;
}
inline ::OstProto::Gmp_IpAddress* Gmp::mutable_group_address() {
  set_has_group_address();
  if (group_address_ == NULL) group_address_ = new ::OstProto::Gmp_IpAddress;
  return group_address_;
}
inline ::OstProto::Gmp_IpAddress* Gmp::release_group_address() {
  clear_has_group_address();
  ::OstProto::Gmp_IpAddress* temp = group_address_;
  group_address_ = NULL;
  return temp;
}

// optional .OstProto.Gmp.GroupMode group_mode = 11 [default = kFixed];
inline bool Gmp::has_group_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gmp::set_has_group_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gmp::clear_has_group_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gmp::clear_group_mode() {
  group_mode_ = 0;
  clear_has_group_mode();
}
inline ::OstProto::Gmp_GroupMode Gmp::group_mode() const {
  return static_cast< ::OstProto::Gmp_GroupMode >(group_mode_);
}
inline void Gmp::set_group_mode(::OstProto::Gmp_GroupMode value) {
  GOOGLE_DCHECK(::OstProto::Gmp_GroupMode_IsValid(value));
  set_has_group_mode();
  group_mode_ = value;
}

// optional uint32 group_count = 12 [default = 16];
inline bool Gmp::has_group_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gmp::set_has_group_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gmp::clear_has_group_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gmp::clear_group_count() {
  group_count_ = 16u;
  clear_has_group_count();
}
inline ::google::protobuf::uint32 Gmp::group_count() const {
  return group_count_;
}
inline void Gmp::set_group_count(::google::protobuf::uint32 value) {
  set_has_group_count();
  group_count_ = value;
}

// optional uint32 group_prefix = 13 [default = 24];
inline bool Gmp::has_group_prefix() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gmp::set_has_group_prefix() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gmp::clear_has_group_prefix() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gmp::clear_group_prefix() {
  group_prefix_ = 24u;
  clear_has_group_prefix();
}
inline ::google::protobuf::uint32 Gmp::group_prefix() const {
  return group_prefix_;
}
inline void Gmp::set_group_prefix(::google::protobuf::uint32 value) {
  set_has_group_prefix();
  group_prefix_ = value;
}

// optional bool s_flag = 20;
inline bool Gmp::has_s_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gmp::set_has_s_flag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gmp::clear_has_s_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gmp::clear_s_flag() {
  s_flag_ = false;
  clear_has_s_flag();
}
inline bool Gmp::s_flag() const {
  return s_flag_;
}
inline void Gmp::set_s_flag(bool value) {
  set_has_s_flag();
  s_flag_ = value;
}

// optional uint32 qrv = 21 [default = 2];
inline bool Gmp::has_qrv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Gmp::set_has_qrv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Gmp::clear_has_qrv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Gmp::clear_qrv() {
  qrv_ = 2u;
  clear_has_qrv();
}
inline ::google::protobuf::uint32 Gmp::qrv() const {
  return qrv_;
}
inline void Gmp::set_qrv(::google::protobuf::uint32 value) {
  set_has_qrv();
  qrv_ = value;
}

// optional uint32 qqi = 22 [default = 125];
inline bool Gmp::has_qqi() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Gmp::set_has_qqi() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Gmp::clear_has_qqi() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Gmp::clear_qqi() {
  qqi_ = 125u;
  clear_has_qqi();
}
inline ::google::protobuf::uint32 Gmp::qqi() const {
  return qqi_;
}
inline void Gmp::set_qqi(::google::protobuf::uint32 value) {
  set_has_qqi();
  qqi_ = value;
}

// repeated .OstProto.Gmp.IpAddress sources = 23;
inline int Gmp::sources_size() const {
  return sources_.size();
}
inline void Gmp::clear_sources() {
  sources_.Clear();
}
inline const ::OstProto::Gmp_IpAddress& Gmp::sources(int index) const {
  return sources_.Get(index);
}
inline ::OstProto::Gmp_IpAddress* Gmp::mutable_sources(int index) {
  return sources_.Mutable(index);
}
inline ::OstProto::Gmp_IpAddress* Gmp::add_sources() {
  return sources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_IpAddress >&
Gmp::sources() const {
  return sources_;
}
inline ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_IpAddress >*
Gmp::mutable_sources() {
  return &sources_;
}

// optional bool is_override_source_count = 24;
inline bool Gmp::has_is_override_source_count() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Gmp::set_has_is_override_source_count() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Gmp::clear_has_is_override_source_count() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Gmp::clear_is_override_source_count() {
  is_override_source_count_ = false;
  clear_has_is_override_source_count();
}
inline bool Gmp::is_override_source_count() const {
  return is_override_source_count_;
}
inline void Gmp::set_is_override_source_count(bool value) {
  set_has_is_override_source_count();
  is_override_source_count_ = value;
}

// optional uint32 source_count = 25;
inline bool Gmp::has_source_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Gmp::set_has_source_count() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Gmp::clear_has_source_count() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Gmp::clear_source_count() {
  source_count_ = 0u;
  clear_has_source_count();
}
inline ::google::protobuf::uint32 Gmp::source_count() const {
  return source_count_;
}
inline void Gmp::set_source_count(::google::protobuf::uint32 value) {
  set_has_source_count();
  source_count_ = value;
}

// repeated .OstProto.Gmp.GroupRecord group_records = 30;
inline int Gmp::group_records_size() const {
  return group_records_.size();
}
inline void Gmp::clear_group_records() {
  group_records_.Clear();
}
inline const ::OstProto::Gmp_GroupRecord& Gmp::group_records(int index) const {
  return group_records_.Get(index);
}
inline ::OstProto::Gmp_GroupRecord* Gmp::mutable_group_records(int index) {
  return group_records_.Mutable(index);
}
inline ::OstProto::Gmp_GroupRecord* Gmp::add_group_records() {
  return group_records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_GroupRecord >&
Gmp::group_records() const {
  return group_records_;
}
inline ::google::protobuf::RepeatedPtrField< ::OstProto::Gmp_GroupRecord >*
Gmp::mutable_group_records() {
  return &group_records_;
}

// optional bool is_override_group_record_count = 31;
inline bool Gmp::has_is_override_group_record_count() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Gmp::set_has_is_override_group_record_count() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Gmp::clear_has_is_override_group_record_count() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Gmp::clear_is_override_group_record_count() {
  is_override_group_record_count_ = false;
  clear_has_is_override_group_record_count();
}
inline bool Gmp::is_override_group_record_count() const {
  return is_override_group_record_count_;
}
inline void Gmp::set_is_override_group_record_count(bool value) {
  set_has_is_override_group_record_count();
  is_override_group_record_count_ = value;
}

// optional uint32 group_record_count = 32;
inline bool Gmp::has_group_record_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Gmp::set_has_group_record_count() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Gmp::clear_has_group_record_count() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Gmp::clear_group_record_count() {
  group_record_count_ = 0u;
  clear_has_group_record_count();
}
inline ::google::protobuf::uint32 Gmp::group_record_count() const {
  return group_record_count_;
}
inline void Gmp::set_group_record_count(::google::protobuf::uint32 value) {
  set_has_group_record_count();
  group_record_count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OstProto::Gmp_GroupRecord_RecordType>() {
  return ::OstProto::Gmp_GroupRecord_RecordType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OstProto::Gmp_GroupMode>() {
  return ::OstProto::Gmp_GroupMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gmp_2eproto__INCLUDED
