// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vlan.proto

#ifndef PROTOBUF_vlan_2eproto__INCLUDED
#define PROTOBUF_vlan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "protocol.pb.h"
// @@protoc_insertion_point(includes)

namespace OstProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_vlan_2eproto();
void protobuf_AssignDesc_vlan_2eproto();
void protobuf_ShutdownFile_vlan_2eproto();

class Vlan;

// ===================================================================

class Vlan : public ::google::protobuf::Message {
 public:
  Vlan();
  virtual ~Vlan();
  
  Vlan(const Vlan& from);
  
  inline Vlan& operator=(const Vlan& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vlan& default_instance();
  
  void Swap(Vlan* other);
  
  // implements Message ----------------------------------------------
  
  Vlan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vlan& from);
  void MergeFrom(const Vlan& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool is_override_tpid = 1;
  inline bool has_is_override_tpid() const;
  inline void clear_is_override_tpid();
  static const int kIsOverrideTpidFieldNumber = 1;
  inline bool is_override_tpid() const;
  inline void set_is_override_tpid(bool value);
  
  // optional uint32 tpid = 2;
  inline bool has_tpid() const;
  inline void clear_tpid();
  static const int kTpidFieldNumber = 2;
  inline ::google::protobuf::uint32 tpid() const;
  inline void set_tpid(::google::protobuf::uint32 value);
  
  // optional uint32 vlan_tag = 3;
  inline bool has_vlan_tag() const;
  inline void clear_vlan_tag();
  static const int kVlanTagFieldNumber = 3;
  inline ::google::protobuf::uint32 vlan_tag() const;
  inline void set_vlan_tag(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:OstProto.Vlan)
 private:
  inline void set_has_is_override_tpid();
  inline void clear_has_is_override_tpid();
  inline void set_has_tpid();
  inline void clear_has_tpid();
  inline void set_has_vlan_tag();
  inline void clear_has_vlan_tag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool is_override_tpid_;
  ::google::protobuf::uint32 tpid_;
  ::google::protobuf::uint32 vlan_tag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_vlan_2eproto();
  friend void protobuf_AssignDesc_vlan_2eproto();
  friend void protobuf_ShutdownFile_vlan_2eproto();
  
  void InitAsDefaultInstance();
  static Vlan* default_instance_;
};
// ===================================================================

static const int kVlanFieldNumber = 205;
extern ::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Vlan >, 11, false >
  vlan;

// ===================================================================

// Vlan

// optional bool is_override_tpid = 1;
inline bool Vlan::has_is_override_tpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vlan::set_has_is_override_tpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vlan::clear_has_is_override_tpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vlan::clear_is_override_tpid() {
  is_override_tpid_ = false;
  clear_has_is_override_tpid();
}
inline bool Vlan::is_override_tpid() const {
  return is_override_tpid_;
}
inline void Vlan::set_is_override_tpid(bool value) {
  set_has_is_override_tpid();
  is_override_tpid_ = value;
}

// optional uint32 tpid = 2;
inline bool Vlan::has_tpid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vlan::set_has_tpid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vlan::clear_has_tpid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vlan::clear_tpid() {
  tpid_ = 0u;
  clear_has_tpid();
}
inline ::google::protobuf::uint32 Vlan::tpid() const {
  return tpid_;
}
inline void Vlan::set_tpid(::google::protobuf::uint32 value) {
  set_has_tpid();
  tpid_ = value;
}

// optional uint32 vlan_tag = 3;
inline bool Vlan::has_vlan_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vlan::set_has_vlan_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vlan::clear_has_vlan_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vlan::clear_vlan_tag() {
  vlan_tag_ = 0u;
  clear_has_vlan_tag();
}
inline ::google::protobuf::uint32 Vlan::vlan_tag() const {
  return vlan_tag_;
}
inline void Vlan::set_vlan_tag(::google::protobuf::uint32 value) {
  set_has_vlan_tag();
  vlan_tag_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vlan_2eproto__INCLUDED
