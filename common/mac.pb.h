// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mac.proto

#ifndef PROTOBUF_mac_2eproto__INCLUDED
#define PROTOBUF_mac_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "protocol.pb.h"
// @@protoc_insertion_point(includes)

namespace OstProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mac_2eproto();
void protobuf_AssignDesc_mac_2eproto();
void protobuf_ShutdownFile_mac_2eproto();

class Mac;

enum Mac_MacAddrMode {
  Mac_MacAddrMode_e_mm_fixed = 0,
  Mac_MacAddrMode_e_mm_inc = 1,
  Mac_MacAddrMode_e_mm_dec = 2
};
bool Mac_MacAddrMode_IsValid(int value);
const Mac_MacAddrMode Mac_MacAddrMode_MacAddrMode_MIN = Mac_MacAddrMode_e_mm_fixed;
const Mac_MacAddrMode Mac_MacAddrMode_MacAddrMode_MAX = Mac_MacAddrMode_e_mm_dec;
const int Mac_MacAddrMode_MacAddrMode_ARRAYSIZE = Mac_MacAddrMode_MacAddrMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mac_MacAddrMode_descriptor();
inline const ::std::string& Mac_MacAddrMode_Name(Mac_MacAddrMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mac_MacAddrMode_descriptor(), value);
}
inline bool Mac_MacAddrMode_Parse(
    const ::std::string& name, Mac_MacAddrMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mac_MacAddrMode>(
    Mac_MacAddrMode_descriptor(), name, value);
}
// ===================================================================

class Mac : public ::google::protobuf::Message {
 public:
  Mac();
  virtual ~Mac();
  
  Mac(const Mac& from);
  
  inline Mac& operator=(const Mac& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mac& default_instance();
  
  void Swap(Mac* other);
  
  // implements Message ----------------------------------------------
  
  Mac* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mac& from);
  void MergeFrom(const Mac& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Mac_MacAddrMode MacAddrMode;
  static const MacAddrMode e_mm_fixed = Mac_MacAddrMode_e_mm_fixed;
  static const MacAddrMode e_mm_inc = Mac_MacAddrMode_e_mm_inc;
  static const MacAddrMode e_mm_dec = Mac_MacAddrMode_e_mm_dec;
  static inline bool MacAddrMode_IsValid(int value) {
    return Mac_MacAddrMode_IsValid(value);
  }
  static const MacAddrMode MacAddrMode_MIN =
    Mac_MacAddrMode_MacAddrMode_MIN;
  static const MacAddrMode MacAddrMode_MAX =
    Mac_MacAddrMode_MacAddrMode_MAX;
  static const int MacAddrMode_ARRAYSIZE =
    Mac_MacAddrMode_MacAddrMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MacAddrMode_descriptor() {
    return Mac_MacAddrMode_descriptor();
  }
  static inline const ::std::string& MacAddrMode_Name(MacAddrMode value) {
    return Mac_MacAddrMode_Name(value);
  }
  static inline bool MacAddrMode_Parse(const ::std::string& name,
      MacAddrMode* value) {
    return Mac_MacAddrMode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional uint64 dst_mac = 1;
  inline bool has_dst_mac() const;
  inline void clear_dst_mac();
  static const int kDstMacFieldNumber = 1;
  inline ::google::protobuf::uint64 dst_mac() const;
  inline void set_dst_mac(::google::protobuf::uint64 value);
  
  // optional .OstProto.Mac.MacAddrMode dst_mac_mode = 2 [default = e_mm_fixed];
  inline bool has_dst_mac_mode() const;
  inline void clear_dst_mac_mode();
  static const int kDstMacModeFieldNumber = 2;
  inline ::OstProto::Mac_MacAddrMode dst_mac_mode() const;
  inline void set_dst_mac_mode(::OstProto::Mac_MacAddrMode value);
  
  // optional uint32 dst_mac_count = 3 [default = 16];
  inline bool has_dst_mac_count() const;
  inline void clear_dst_mac_count();
  static const int kDstMacCountFieldNumber = 3;
  inline ::google::protobuf::uint32 dst_mac_count() const;
  inline void set_dst_mac_count(::google::protobuf::uint32 value);
  
  // optional uint32 dst_mac_step = 4 [default = 1];
  inline bool has_dst_mac_step() const;
  inline void clear_dst_mac_step();
  static const int kDstMacStepFieldNumber = 4;
  inline ::google::protobuf::uint32 dst_mac_step() const;
  inline void set_dst_mac_step(::google::protobuf::uint32 value);
  
  // optional uint64 src_mac = 5;
  inline bool has_src_mac() const;
  inline void clear_src_mac();
  static const int kSrcMacFieldNumber = 5;
  inline ::google::protobuf::uint64 src_mac() const;
  inline void set_src_mac(::google::protobuf::uint64 value);
  
  // optional .OstProto.Mac.MacAddrMode src_mac_mode = 6 [default = e_mm_fixed];
  inline bool has_src_mac_mode() const;
  inline void clear_src_mac_mode();
  static const int kSrcMacModeFieldNumber = 6;
  inline ::OstProto::Mac_MacAddrMode src_mac_mode() const;
  inline void set_src_mac_mode(::OstProto::Mac_MacAddrMode value);
  
  // optional uint32 src_mac_count = 7 [default = 16];
  inline bool has_src_mac_count() const;
  inline void clear_src_mac_count();
  static const int kSrcMacCountFieldNumber = 7;
  inline ::google::protobuf::uint32 src_mac_count() const;
  inline void set_src_mac_count(::google::protobuf::uint32 value);
  
  // optional uint32 src_mac_step = 8 [default = 1];
  inline bool has_src_mac_step() const;
  inline void clear_src_mac_step();
  static const int kSrcMacStepFieldNumber = 8;
  inline ::google::protobuf::uint32 src_mac_step() const;
  inline void set_src_mac_step(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:OstProto.Mac)
 private:
  inline void set_has_dst_mac();
  inline void clear_has_dst_mac();
  inline void set_has_dst_mac_mode();
  inline void clear_has_dst_mac_mode();
  inline void set_has_dst_mac_count();
  inline void clear_has_dst_mac_count();
  inline void set_has_dst_mac_step();
  inline void clear_has_dst_mac_step();
  inline void set_has_src_mac();
  inline void clear_has_src_mac();
  inline void set_has_src_mac_mode();
  inline void clear_has_src_mac_mode();
  inline void set_has_src_mac_count();
  inline void clear_has_src_mac_count();
  inline void set_has_src_mac_step();
  inline void clear_has_src_mac_step();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 dst_mac_;
  int dst_mac_mode_;
  ::google::protobuf::uint32 dst_mac_count_;
  ::google::protobuf::uint64 src_mac_;
  ::google::protobuf::uint32 dst_mac_step_;
  int src_mac_mode_;
  ::google::protobuf::uint32 src_mac_count_;
  ::google::protobuf::uint32 src_mac_step_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_mac_2eproto();
  friend void protobuf_AssignDesc_mac_2eproto();
  friend void protobuf_ShutdownFile_mac_2eproto();
  
  void InitAsDefaultInstance();
  static Mac* default_instance_;
};
// ===================================================================

static const int kMacFieldNumber = 100;
extern ::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Mac >, 11, false >
  mac;

// ===================================================================

// Mac

// optional uint64 dst_mac = 1;
inline bool Mac::has_dst_mac() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mac::set_has_dst_mac() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mac::clear_has_dst_mac() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mac::clear_dst_mac() {
  dst_mac_ = GOOGLE_ULONGLONG(0);
  clear_has_dst_mac();
}
inline ::google::protobuf::uint64 Mac::dst_mac() const {
  return dst_mac_;
}
inline void Mac::set_dst_mac(::google::protobuf::uint64 value) {
  set_has_dst_mac();
  dst_mac_ = value;
}

// optional .OstProto.Mac.MacAddrMode dst_mac_mode = 2 [default = e_mm_fixed];
inline bool Mac::has_dst_mac_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mac::set_has_dst_mac_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mac::clear_has_dst_mac_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mac::clear_dst_mac_mode() {
  dst_mac_mode_ = 0;
  clear_has_dst_mac_mode();
}
inline ::OstProto::Mac_MacAddrMode Mac::dst_mac_mode() const {
  return static_cast< ::OstProto::Mac_MacAddrMode >(dst_mac_mode_);
}
inline void Mac::set_dst_mac_mode(::OstProto::Mac_MacAddrMode value) {
  GOOGLE_DCHECK(::OstProto::Mac_MacAddrMode_IsValid(value));
  set_has_dst_mac_mode();
  dst_mac_mode_ = value;
}

// optional uint32 dst_mac_count = 3 [default = 16];
inline bool Mac::has_dst_mac_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mac::set_has_dst_mac_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mac::clear_has_dst_mac_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mac::clear_dst_mac_count() {
  dst_mac_count_ = 16u;
  clear_has_dst_mac_count();
}
inline ::google::protobuf::uint32 Mac::dst_mac_count() const {
  return dst_mac_count_;
}
inline void Mac::set_dst_mac_count(::google::protobuf::uint32 value) {
  set_has_dst_mac_count();
  dst_mac_count_ = value;
}

// optional uint32 dst_mac_step = 4 [default = 1];
inline bool Mac::has_dst_mac_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mac::set_has_dst_mac_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mac::clear_has_dst_mac_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mac::clear_dst_mac_step() {
  dst_mac_step_ = 1u;
  clear_has_dst_mac_step();
}
inline ::google::protobuf::uint32 Mac::dst_mac_step() const {
  return dst_mac_step_;
}
inline void Mac::set_dst_mac_step(::google::protobuf::uint32 value) {
  set_has_dst_mac_step();
  dst_mac_step_ = value;
}

// optional uint64 src_mac = 5;
inline bool Mac::has_src_mac() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Mac::set_has_src_mac() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Mac::clear_has_src_mac() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Mac::clear_src_mac() {
  src_mac_ = GOOGLE_ULONGLONG(0);
  clear_has_src_mac();
}
inline ::google::protobuf::uint64 Mac::src_mac() const {
  return src_mac_;
}
inline void Mac::set_src_mac(::google::protobuf::uint64 value) {
  set_has_src_mac();
  src_mac_ = value;
}

// optional .OstProto.Mac.MacAddrMode src_mac_mode = 6 [default = e_mm_fixed];
inline bool Mac::has_src_mac_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Mac::set_has_src_mac_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Mac::clear_has_src_mac_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Mac::clear_src_mac_mode() {
  src_mac_mode_ = 0;
  clear_has_src_mac_mode();
}
inline ::OstProto::Mac_MacAddrMode Mac::src_mac_mode() const {
  return static_cast< ::OstProto::Mac_MacAddrMode >(src_mac_mode_);
}
inline void Mac::set_src_mac_mode(::OstProto::Mac_MacAddrMode value) {
  GOOGLE_DCHECK(::OstProto::Mac_MacAddrMode_IsValid(value));
  set_has_src_mac_mode();
  src_mac_mode_ = value;
}

// optional uint32 src_mac_count = 7 [default = 16];
inline bool Mac::has_src_mac_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Mac::set_has_src_mac_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Mac::clear_has_src_mac_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Mac::clear_src_mac_count() {
  src_mac_count_ = 16u;
  clear_has_src_mac_count();
}
inline ::google::protobuf::uint32 Mac::src_mac_count() const {
  return src_mac_count_;
}
inline void Mac::set_src_mac_count(::google::protobuf::uint32 value) {
  set_has_src_mac_count();
  src_mac_count_ = value;
}

// optional uint32 src_mac_step = 8 [default = 1];
inline bool Mac::has_src_mac_step() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Mac::set_has_src_mac_step() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Mac::clear_has_src_mac_step() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Mac::clear_src_mac_step() {
  src_mac_step_ = 1u;
  clear_has_src_mac_step();
}
inline ::google::protobuf::uint32 Mac::src_mac_step() const {
  return src_mac_step_;
}
inline void Mac::set_src_mac_step(::google::protobuf::uint32 value) {
  set_has_src_mac_step();
  src_mac_step_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OstProto::Mac_MacAddrMode>() {
  return ::OstProto::Mac_MacAddrMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mac_2eproto__INCLUDED
