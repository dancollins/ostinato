// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "icmp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OstProto {

namespace {

const ::google::protobuf::Descriptor* Icmp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Icmp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Icmp_Version_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_icmp_2eproto() {
  protobuf_AddDesc_icmp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "icmp.proto");
  GOOGLE_CHECK(file != NULL);
  Icmp_descriptor_ = file->message_type(0);
  static const int Icmp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Icmp, icmp_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Icmp, is_override_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Icmp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Icmp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Icmp, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Icmp, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Icmp, sequence_),
  };
  Icmp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Icmp_descriptor_,
      Icmp::default_instance_,
      Icmp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Icmp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Icmp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Icmp));
  Icmp_Version_descriptor_ = Icmp_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_icmp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Icmp_descriptor_, &Icmp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_icmp_2eproto() {
  delete Icmp::default_instance_;
  delete Icmp_reflection_;
}

void protobuf_AddDesc_icmp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::OstProto::protobuf_AddDesc_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nicmp.proto\022\010OstProto\032\016protocol.proto\"\332"
    "\001\n\004Icmp\0224\n\014icmp_version\030\001 \001(\0162\026.OstProto"
    ".Icmp.Version:\006kIcmp4\022\034\n\024is_override_che"
    "cksum\030\002 \001(\010\022\017\n\004type\030\006 \001(\r:\0018\022\014\n\004code\030\007 \001"
    "(\r\022\020\n\010checksum\030\010 \001(\r\022\030\n\nidentifier\030\t \001(\r"
    ":\0041234\022\020\n\010sequence\030\n \001(\r\"!\n\007Version\022\n\n\006k"
    "Icmp4\020\004\022\n\n\006kIcmp6\020\006:1\n\004icmp\022\022.OstProto.P"
    "rotocol\030\222\003 \001(\0132\016.OstProto.Icmp", 310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "icmp.proto", &protobuf_RegisterTypes);
  Icmp::default_instance_ = new Icmp();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::OstProto::Protocol::default_instance(),
    402, 11, false, false,
    &::OstProto::Icmp::default_instance());
  Icmp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_icmp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_icmp_2eproto {
  StaticDescriptorInitializer_icmp_2eproto() {
    protobuf_AddDesc_icmp_2eproto();
  }
} static_descriptor_initializer_icmp_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Icmp_Version_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Icmp_Version_descriptor_;
}
bool Icmp_Version_IsValid(int value) {
  switch(value) {
    case 4:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Icmp_Version Icmp::kIcmp4;
const Icmp_Version Icmp::kIcmp6;
const Icmp_Version Icmp::Version_MIN;
const Icmp_Version Icmp::Version_MAX;
const int Icmp::Version_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Icmp::kIcmpVersionFieldNumber;
const int Icmp::kIsOverrideChecksumFieldNumber;
const int Icmp::kTypeFieldNumber;
const int Icmp::kCodeFieldNumber;
const int Icmp::kChecksumFieldNumber;
const int Icmp::kIdentifierFieldNumber;
const int Icmp::kSequenceFieldNumber;
#endif  // !_MSC_VER

Icmp::Icmp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Icmp::InitAsDefaultInstance() {
}

Icmp::Icmp(const Icmp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Icmp::SharedCtor() {
  _cached_size_ = 0;
  icmp_version_ = 4;
  is_override_checksum_ = false;
  type_ = 8u;
  code_ = 0u;
  checksum_ = 0u;
  identifier_ = 1234u;
  sequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Icmp::~Icmp() {
  SharedDtor();
}

void Icmp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Icmp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Icmp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Icmp_descriptor_;
}

const Icmp& Icmp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_icmp_2eproto();  return *default_instance_;
}

Icmp* Icmp::default_instance_ = NULL;

Icmp* Icmp::New() const {
  return new Icmp;
}

void Icmp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icmp_version_ = 4;
    is_override_checksum_ = false;
    type_ = 8u;
    code_ = 0u;
    checksum_ = 0u;
    identifier_ = 1234u;
    sequence_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Icmp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OstProto.Icmp.Version icmp_version = 1 [default = kIcmp4];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OstProto::Icmp_Version_IsValid(value)) {
            set_icmp_version(static_cast< ::OstProto::Icmp_Version >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_override_checksum;
        break;
      }
      
      // optional bool is_override_checksum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_checksum_)));
          set_has_is_override_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 6 [default = 8];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_code;
        break;
      }
      
      // optional uint32 code = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_checksum;
        break;
      }
      
      // optional uint32 checksum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_identifier;
        break;
      }
      
      // optional uint32 identifier = 9 [default = 1234];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
          set_has_identifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sequence;
        break;
      }
      
      // optional uint32 sequence = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Icmp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .OstProto.Icmp.Version icmp_version = 1 [default = kIcmp4];
  if (has_icmp_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->icmp_version(), output);
  }
  
  // optional bool is_override_checksum = 2;
  if (has_is_override_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_override_checksum(), output);
  }
  
  // optional uint32 type = 6 [default = 8];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }
  
  // optional uint32 code = 7;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->code(), output);
  }
  
  // optional uint32 checksum = 8;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->checksum(), output);
  }
  
  // optional uint32 identifier = 9 [default = 1234];
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->identifier(), output);
  }
  
  // optional uint32 sequence = 10;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sequence(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Icmp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .OstProto.Icmp.Version icmp_version = 1 [default = kIcmp4];
  if (has_icmp_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->icmp_version(), target);
  }
  
  // optional bool is_override_checksum = 2;
  if (has_is_override_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_override_checksum(), target);
  }
  
  // optional uint32 type = 6 [default = 8];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }
  
  // optional uint32 code = 7;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->code(), target);
  }
  
  // optional uint32 checksum = 8;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->checksum(), target);
  }
  
  // optional uint32 identifier = 9 [default = 1234];
  if (has_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->identifier(), target);
  }
  
  // optional uint32 sequence = 10;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sequence(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Icmp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .OstProto.Icmp.Version icmp_version = 1 [default = kIcmp4];
    if (has_icmp_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->icmp_version());
    }
    
    // optional bool is_override_checksum = 2;
    if (has_is_override_checksum()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 type = 6 [default = 8];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 code = 7;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }
    
    // optional uint32 checksum = 8;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checksum());
    }
    
    // optional uint32 identifier = 9 [default = 1234];
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identifier());
    }
    
    // optional uint32 sequence = 10;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Icmp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Icmp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Icmp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Icmp::MergeFrom(const Icmp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icmp_version()) {
      set_icmp_version(from.icmp_version());
    }
    if (from.has_is_override_checksum()) {
      set_is_override_checksum(from.is_override_checksum());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Icmp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Icmp::CopyFrom(const Icmp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Icmp::IsInitialized() const {
  
  return true;
}

void Icmp::Swap(Icmp* other) {
  if (other != this) {
    std::swap(icmp_version_, other->icmp_version_);
    std::swap(is_override_checksum_, other->is_override_checksum_);
    std::swap(type_, other->type_);
    std::swap(code_, other->code_);
    std::swap(checksum_, other->checksum_);
    std::swap(identifier_, other->identifier_);
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Icmp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Icmp_descriptor_;
  metadata.reflection = Icmp_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Icmp >, 11, false >
  icmp(kIcmpFieldNumber, ::OstProto::Icmp::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

// @@protoc_insertion_point(global_scope)
