// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "textproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OstProto {

namespace {

const ::google::protobuf::Descriptor* TextProtocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextProtocol_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TextProtocol_TextEncoding_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TextProtocol_EndOfLine_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_textproto_2eproto() {
  protobuf_AddDesc_textproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "textproto.proto");
  GOOGLE_CHECK(file != NULL);
  TextProtocol_descriptor_ = file->message_type(0);
  static const int TextProtocol_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextProtocol, port_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextProtocol, encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextProtocol, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextProtocol, eol_),
  };
  TextProtocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextProtocol_descriptor_,
      TextProtocol::default_instance_,
      TextProtocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextProtocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextProtocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextProtocol));
  TextProtocol_TextEncoding_descriptor_ = TextProtocol_descriptor_->enum_type(0);
  TextProtocol_EndOfLine_descriptor_ = TextProtocol_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_textproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextProtocol_descriptor_, &TextProtocol::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_textproto_2eproto() {
  delete TextProtocol::default_instance_;
  delete TextProtocol_reflection_;
}

void protobuf_AddDesc_textproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::OstProto::protobuf_AddDesc_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017textproto.proto\022\010OstProto\032\016protocol.pr"
    "oto\"\351\001\n\014TextProtocol\022\024\n\010port_num\030\001 \001(\r:\002"
    "80\022<\n\010encoding\030\002 \001(\0162#.OstProto.TextProt"
    "ocol.TextEncoding:\005kUtf8\022\014\n\004text\030\003 \001(\t\0222"
    "\n\003eol\030\004 \001(\0162 .OstProto.TextProtocol.EndO"
    "fLine:\003kLf\"\031\n\014TextEncoding\022\t\n\005kUtf8\020\000\"(\n"
    "\tEndOfLine\022\007\n\003kCr\020\000\022\007\n\003kLf\020\001\022\t\n\005kCrLf\020\002:"
    "A\n\014textProtocol\022\022.OstProto.Protocol\030\364\003 \001"
    "(\0132\026.OstProto.TextProtocol", 346);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "textproto.proto", &protobuf_RegisterTypes);
  TextProtocol::default_instance_ = new TextProtocol();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::OstProto::Protocol::default_instance(),
    500, 11, false, false,
    &::OstProto::TextProtocol::default_instance());
  TextProtocol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_textproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_textproto_2eproto {
  StaticDescriptorInitializer_textproto_2eproto() {
    protobuf_AddDesc_textproto_2eproto();
  }
} static_descriptor_initializer_textproto_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* TextProtocol_TextEncoding_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextProtocol_TextEncoding_descriptor_;
}
bool TextProtocol_TextEncoding_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TextProtocol_TextEncoding TextProtocol::kUtf8;
const TextProtocol_TextEncoding TextProtocol::TextEncoding_MIN;
const TextProtocol_TextEncoding TextProtocol::TextEncoding_MAX;
const int TextProtocol::TextEncoding_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TextProtocol_EndOfLine_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextProtocol_EndOfLine_descriptor_;
}
bool TextProtocol_EndOfLine_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TextProtocol_EndOfLine TextProtocol::kCr;
const TextProtocol_EndOfLine TextProtocol::kLf;
const TextProtocol_EndOfLine TextProtocol::kCrLf;
const TextProtocol_EndOfLine TextProtocol::EndOfLine_MIN;
const TextProtocol_EndOfLine TextProtocol::EndOfLine_MAX;
const int TextProtocol::EndOfLine_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TextProtocol::kPortNumFieldNumber;
const int TextProtocol::kEncodingFieldNumber;
const int TextProtocol::kTextFieldNumber;
const int TextProtocol::kEolFieldNumber;
#endif  // !_MSC_VER

TextProtocol::TextProtocol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TextProtocol::InitAsDefaultInstance() {
}

TextProtocol::TextProtocol(const TextProtocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TextProtocol::SharedCtor() {
  _cached_size_ = 0;
  port_num_ = 80u;
  encoding_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eol_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextProtocol::~TextProtocol() {
  SharedDtor();
}

void TextProtocol::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void TextProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextProtocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextProtocol_descriptor_;
}

const TextProtocol& TextProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_textproto_2eproto();  return *default_instance_;
}

TextProtocol* TextProtocol::default_instance_ = NULL;

TextProtocol* TextProtocol::New() const {
  return new TextProtocol;
}

void TextProtocol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_num_ = 80u;
    encoding_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    eol_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 port_num = 1 [default = 80];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_num_)));
          set_has_port_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_encoding;
        break;
      }
      
      // optional .OstProto.TextProtocol.TextEncoding encoding = 2 [default = kUtf8];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encoding:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OstProto::TextProtocol_TextEncoding_IsValid(value)) {
            set_encoding(static_cast< ::OstProto::TextProtocol_TextEncoding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }
      
      // optional string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_eol;
        break;
      }
      
      // optional .OstProto.TextProtocol.EndOfLine eol = 4 [default = kLf];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OstProto::TextProtocol_EndOfLine_IsValid(value)) {
            set_eol(static_cast< ::OstProto::TextProtocol_EndOfLine >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 port_num = 1 [default = 80];
  if (has_port_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port_num(), output);
  }
  
  // optional .OstProto.TextProtocol.TextEncoding encoding = 2 [default = kUtf8];
  if (has_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }
  
  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }
  
  // optional .OstProto.TextProtocol.EndOfLine eol = 4 [default = kLf];
  if (has_eol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->eol(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TextProtocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 port_num = 1 [default = 80];
  if (has_port_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port_num(), target);
  }
  
  // optional .OstProto.TextProtocol.TextEncoding encoding = 2 [default = kUtf8];
  if (has_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }
  
  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }
  
  // optional .OstProto.TextProtocol.EndOfLine eol = 4 [default = kLf];
  if (has_eol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->eol(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TextProtocol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 port_num = 1 [default = 80];
    if (has_port_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port_num());
    }
    
    // optional .OstProto.TextProtocol.TextEncoding encoding = 2 [default = kUtf8];
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }
    
    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional .OstProto.TextProtocol.EndOfLine eol = 4 [default = kLf];
    if (has_eol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eol());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextProtocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextProtocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextProtocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextProtocol::MergeFrom(const TextProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port_num()) {
      set_port_num(from.port_num());
    }
    if (from.has_encoding()) {
      set_encoding(from.encoding());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_eol()) {
      set_eol(from.eol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextProtocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextProtocol::CopyFrom(const TextProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextProtocol::IsInitialized() const {
  
  return true;
}

void TextProtocol::Swap(TextProtocol* other) {
  if (other != this) {
    std::swap(port_num_, other->port_num_);
    std::swap(encoding_, other->encoding_);
    std::swap(text_, other->text_);
    std::swap(eol_, other->eol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextProtocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextProtocol_descriptor_;
  metadata.reflection = TextProtocol_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::TextProtocol >, 11, false >
  textProtocol(kTextProtocolFieldNumber, ::OstProto::TextProtocol::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

// @@protoc_insertion_point(global_scope)
