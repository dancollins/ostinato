// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "arp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OstProto {

namespace {

const ::google::protobuf::Descriptor* Arp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Arp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Arp_HwAddrMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Arp_ProtoAddrMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_arp_2eproto() {
  protobuf_AddDesc_arp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "arp.proto");
  GOOGLE_CHECK(file != NULL);
  Arp_descriptor_ = file->message_type(0);
  static const int Arp_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, hw_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, proto_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, hw_addr_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, proto_addr_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, op_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, sender_hw_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, sender_hw_addr_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, sender_hw_addr_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, sender_proto_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, sender_proto_addr_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, sender_proto_addr_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, sender_proto_addr_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, target_hw_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, target_hw_addr_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, target_hw_addr_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, target_proto_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, target_proto_addr_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, target_proto_addr_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, target_proto_addr_mask_),
  };
  Arp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Arp_descriptor_,
      Arp::default_instance_,
      Arp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Arp));
  Arp_HwAddrMode_descriptor_ = Arp_descriptor_->enum_type(0);
  Arp_ProtoAddrMode_descriptor_ = Arp_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_arp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Arp_descriptor_, &Arp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_arp_2eproto() {
  delete Arp::default_instance_;
  delete Arp_reflection_;
}

void protobuf_AddDesc_arp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::OstProto::protobuf_AddDesc_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tarp.proto\022\010OstProto\032\016protocol.proto\"\352\006"
    "\n\003Arp\022\022\n\007hw_type\030\001 \001(\r:\0011\022\030\n\nproto_type\030"
    "\002 \001(\r:\0042048\022\026\n\013hw_addr_len\030\003 \001(\r:\0016\022\031\n\016p"
    "roto_addr_len\030\004 \001(\r:\0014\022\022\n\007op_code\030\005 \001(\r:"
    "\0011\022\026\n\016sender_hw_addr\030\006 \001(\004\022=\n\023sender_hw_"
    "addr_mode\030\007 \001(\0162\030.OstProto.Arp.HwAddrMod"
    "e:\006kFixed\022 \n\024sender_hw_addr_count\030\010 \001(\r:"
    "\00216\022\031\n\021sender_proto_addr\030\t \001(\r\022G\n\026sender"
    "_proto_addr_mode\030\n \001(\0162\033.OstProto.Arp.Pr"
    "otoAddrMode:\nkFixedHost\022#\n\027sender_proto_"
    "addr_count\030\013 \001(\r:\00216\022*\n\026sender_proto_add"
    "r_mask\030\014 \001(\007:\n4294967040\022\026\n\016target_hw_ad"
    "dr\030\r \001(\004\022=\n\023target_hw_addr_mode\030\016 \001(\0162\030."
    "OstProto.Arp.HwAddrMode:\006kFixed\022 \n\024targe"
    "t_hw_addr_count\030\017 \001(\r:\00216\022\031\n\021target_prot"
    "o_addr\030\020 \001(\r\022G\n\026target_proto_addr_mode\030\021"
    " \001(\0162\033.OstProto.Arp.ProtoAddrMode:\nkFixe"
    "dHost\022#\n\027target_proto_addr_count\030\022 \001(\r:\002"
    "16\022*\n\026target_proto_addr_mask\030\023 \001(\007:\n4294"
    "967040\"8\n\nHwAddrMode\022\n\n\006kFixed\020\000\022\016\n\nkInc"
    "rement\020\001\022\016\n\nkDecrement\020\002\"X\n\rProtoAddrMod"
    "e\022\016\n\nkFixedHost\020\000\022\022\n\016kIncrementHost\020\001\022\022\n"
    "\016kDecrementHost\020\002\022\017\n\013kRandomHost\020\003:/\n\003ar"
    "p\022\022.OstProto.Protocol\030\254\002 \001(\0132\r.OstProto."
    "Arp", 963);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "arp.proto", &protobuf_RegisterTypes);
  Arp::default_instance_ = new Arp();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::OstProto::Protocol::default_instance(),
    300, 11, false, false,
    &::OstProto::Arp::default_instance());
  Arp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_arp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_arp_2eproto {
  StaticDescriptorInitializer_arp_2eproto() {
    protobuf_AddDesc_arp_2eproto();
  }
} static_descriptor_initializer_arp_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Arp_HwAddrMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arp_HwAddrMode_descriptor_;
}
bool Arp_HwAddrMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Arp_HwAddrMode Arp::kFixed;
const Arp_HwAddrMode Arp::kIncrement;
const Arp_HwAddrMode Arp::kDecrement;
const Arp_HwAddrMode Arp::HwAddrMode_MIN;
const Arp_HwAddrMode Arp::HwAddrMode_MAX;
const int Arp::HwAddrMode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Arp_ProtoAddrMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arp_ProtoAddrMode_descriptor_;
}
bool Arp_ProtoAddrMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Arp_ProtoAddrMode Arp::kFixedHost;
const Arp_ProtoAddrMode Arp::kIncrementHost;
const Arp_ProtoAddrMode Arp::kDecrementHost;
const Arp_ProtoAddrMode Arp::kRandomHost;
const Arp_ProtoAddrMode Arp::ProtoAddrMode_MIN;
const Arp_ProtoAddrMode Arp::ProtoAddrMode_MAX;
const int Arp::ProtoAddrMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Arp::kHwTypeFieldNumber;
const int Arp::kProtoTypeFieldNumber;
const int Arp::kHwAddrLenFieldNumber;
const int Arp::kProtoAddrLenFieldNumber;
const int Arp::kOpCodeFieldNumber;
const int Arp::kSenderHwAddrFieldNumber;
const int Arp::kSenderHwAddrModeFieldNumber;
const int Arp::kSenderHwAddrCountFieldNumber;
const int Arp::kSenderProtoAddrFieldNumber;
const int Arp::kSenderProtoAddrModeFieldNumber;
const int Arp::kSenderProtoAddrCountFieldNumber;
const int Arp::kSenderProtoAddrMaskFieldNumber;
const int Arp::kTargetHwAddrFieldNumber;
const int Arp::kTargetHwAddrModeFieldNumber;
const int Arp::kTargetHwAddrCountFieldNumber;
const int Arp::kTargetProtoAddrFieldNumber;
const int Arp::kTargetProtoAddrModeFieldNumber;
const int Arp::kTargetProtoAddrCountFieldNumber;
const int Arp::kTargetProtoAddrMaskFieldNumber;
#endif  // !_MSC_VER

Arp::Arp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Arp::InitAsDefaultInstance() {
}

Arp::Arp(const Arp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Arp::SharedCtor() {
  _cached_size_ = 0;
  hw_type_ = 1u;
  proto_type_ = 2048u;
  hw_addr_len_ = 6u;
  proto_addr_len_ = 4u;
  op_code_ = 1u;
  sender_hw_addr_ = GOOGLE_ULONGLONG(0);
  sender_hw_addr_mode_ = 0;
  sender_hw_addr_count_ = 16u;
  sender_proto_addr_ = 0u;
  sender_proto_addr_mode_ = 0;
  sender_proto_addr_count_ = 16u;
  sender_proto_addr_mask_ = 4294967040u;
  target_hw_addr_ = GOOGLE_ULONGLONG(0);
  target_hw_addr_mode_ = 0;
  target_hw_addr_count_ = 16u;
  target_proto_addr_ = 0u;
  target_proto_addr_mode_ = 0;
  target_proto_addr_count_ = 16u;
  target_proto_addr_mask_ = 4294967040u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Arp::~Arp() {
  SharedDtor();
}

void Arp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Arp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Arp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arp_descriptor_;
}

const Arp& Arp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arp_2eproto();  return *default_instance_;
}

Arp* Arp::default_instance_ = NULL;

Arp* Arp::New() const {
  return new Arp;
}

void Arp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hw_type_ = 1u;
    proto_type_ = 2048u;
    hw_addr_len_ = 6u;
    proto_addr_len_ = 4u;
    op_code_ = 1u;
    sender_hw_addr_ = GOOGLE_ULONGLONG(0);
    sender_hw_addr_mode_ = 0;
    sender_hw_addr_count_ = 16u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sender_proto_addr_ = 0u;
    sender_proto_addr_mode_ = 0;
    sender_proto_addr_count_ = 16u;
    sender_proto_addr_mask_ = 4294967040u;
    target_hw_addr_ = GOOGLE_ULONGLONG(0);
    target_hw_addr_mode_ = 0;
    target_hw_addr_count_ = 16u;
    target_proto_addr_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    target_proto_addr_mode_ = 0;
    target_proto_addr_count_ = 16u;
    target_proto_addr_mask_ = 4294967040u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Arp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hw_type = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hw_type_)));
          set_has_hw_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proto_type;
        break;
      }
      
      // optional uint32 proto_type = 2 [default = 2048];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proto_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proto_type_)));
          set_has_proto_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hw_addr_len;
        break;
      }
      
      // optional uint32 hw_addr_len = 3 [default = 6];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hw_addr_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hw_addr_len_)));
          set_has_hw_addr_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_proto_addr_len;
        break;
      }
      
      // optional uint32 proto_addr_len = 4 [default = 4];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proto_addr_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proto_addr_len_)));
          set_has_proto_addr_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_op_code;
        break;
      }
      
      // optional uint32 op_code = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_code_)));
          set_has_op_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sender_hw_addr;
        break;
      }
      
      // optional uint64 sender_hw_addr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_hw_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sender_hw_addr_)));
          set_has_sender_hw_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sender_hw_addr_mode;
        break;
      }
      
      // optional .OstProto.Arp.HwAddrMode sender_hw_addr_mode = 7 [default = kFixed];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_hw_addr_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OstProto::Arp_HwAddrMode_IsValid(value)) {
            set_sender_hw_addr_mode(static_cast< ::OstProto::Arp_HwAddrMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sender_hw_addr_count;
        break;
      }
      
      // optional uint32 sender_hw_addr_count = 8 [default = 16];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_hw_addr_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_hw_addr_count_)));
          set_has_sender_hw_addr_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sender_proto_addr;
        break;
      }
      
      // optional uint32 sender_proto_addr = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_proto_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_proto_addr_)));
          set_has_sender_proto_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sender_proto_addr_mode;
        break;
      }
      
      // optional .OstProto.Arp.ProtoAddrMode sender_proto_addr_mode = 10 [default = kFixedHost];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_proto_addr_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OstProto::Arp_ProtoAddrMode_IsValid(value)) {
            set_sender_proto_addr_mode(static_cast< ::OstProto::Arp_ProtoAddrMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_sender_proto_addr_count;
        break;
      }
      
      // optional uint32 sender_proto_addr_count = 11 [default = 16];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_proto_addr_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_proto_addr_count_)));
          set_has_sender_proto_addr_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_sender_proto_addr_mask;
        break;
      }
      
      // optional fixed32 sender_proto_addr_mask = 12 [default = 4294967040];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sender_proto_addr_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sender_proto_addr_mask_)));
          set_has_sender_proto_addr_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_target_hw_addr;
        break;
      }
      
      // optional uint64 target_hw_addr = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_hw_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_hw_addr_)));
          set_has_target_hw_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_target_hw_addr_mode;
        break;
      }
      
      // optional .OstProto.Arp.HwAddrMode target_hw_addr_mode = 14 [default = kFixed];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_hw_addr_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OstProto::Arp_HwAddrMode_IsValid(value)) {
            set_target_hw_addr_mode(static_cast< ::OstProto::Arp_HwAddrMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_target_hw_addr_count;
        break;
      }
      
      // optional uint32 target_hw_addr_count = 15 [default = 16];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_hw_addr_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_hw_addr_count_)));
          set_has_target_hw_addr_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_target_proto_addr;
        break;
      }
      
      // optional uint32 target_proto_addr = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_proto_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_proto_addr_)));
          set_has_target_proto_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_target_proto_addr_mode;
        break;
      }
      
      // optional .OstProto.Arp.ProtoAddrMode target_proto_addr_mode = 17 [default = kFixedHost];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_proto_addr_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OstProto::Arp_ProtoAddrMode_IsValid(value)) {
            set_target_proto_addr_mode(static_cast< ::OstProto::Arp_ProtoAddrMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_target_proto_addr_count;
        break;
      }
      
      // optional uint32 target_proto_addr_count = 18 [default = 16];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_proto_addr_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_proto_addr_count_)));
          set_has_target_proto_addr_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_target_proto_addr_mask;
        break;
      }
      
      // optional fixed32 target_proto_addr_mask = 19 [default = 4294967040];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_target_proto_addr_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &target_proto_addr_mask_)));
          set_has_target_proto_addr_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Arp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hw_type = 1 [default = 1];
  if (has_hw_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hw_type(), output);
  }
  
  // optional uint32 proto_type = 2 [default = 2048];
  if (has_proto_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proto_type(), output);
  }
  
  // optional uint32 hw_addr_len = 3 [default = 6];
  if (has_hw_addr_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hw_addr_len(), output);
  }
  
  // optional uint32 proto_addr_len = 4 [default = 4];
  if (has_proto_addr_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->proto_addr_len(), output);
  }
  
  // optional uint32 op_code = 5 [default = 1];
  if (has_op_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->op_code(), output);
  }
  
  // optional uint64 sender_hw_addr = 6;
  if (has_sender_hw_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sender_hw_addr(), output);
  }
  
  // optional .OstProto.Arp.HwAddrMode sender_hw_addr_mode = 7 [default = kFixed];
  if (has_sender_hw_addr_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->sender_hw_addr_mode(), output);
  }
  
  // optional uint32 sender_hw_addr_count = 8 [default = 16];
  if (has_sender_hw_addr_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sender_hw_addr_count(), output);
  }
  
  // optional uint32 sender_proto_addr = 9;
  if (has_sender_proto_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sender_proto_addr(), output);
  }
  
  // optional .OstProto.Arp.ProtoAddrMode sender_proto_addr_mode = 10 [default = kFixedHost];
  if (has_sender_proto_addr_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->sender_proto_addr_mode(), output);
  }
  
  // optional uint32 sender_proto_addr_count = 11 [default = 16];
  if (has_sender_proto_addr_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sender_proto_addr_count(), output);
  }
  
  // optional fixed32 sender_proto_addr_mask = 12 [default = 4294967040];
  if (has_sender_proto_addr_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->sender_proto_addr_mask(), output);
  }
  
  // optional uint64 target_hw_addr = 13;
  if (has_target_hw_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->target_hw_addr(), output);
  }
  
  // optional .OstProto.Arp.HwAddrMode target_hw_addr_mode = 14 [default = kFixed];
  if (has_target_hw_addr_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->target_hw_addr_mode(), output);
  }
  
  // optional uint32 target_hw_addr_count = 15 [default = 16];
  if (has_target_hw_addr_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->target_hw_addr_count(), output);
  }
  
  // optional uint32 target_proto_addr = 16;
  if (has_target_proto_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->target_proto_addr(), output);
  }
  
  // optional .OstProto.Arp.ProtoAddrMode target_proto_addr_mode = 17 [default = kFixedHost];
  if (has_target_proto_addr_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->target_proto_addr_mode(), output);
  }
  
  // optional uint32 target_proto_addr_count = 18 [default = 16];
  if (has_target_proto_addr_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->target_proto_addr_count(), output);
  }
  
  // optional fixed32 target_proto_addr_mask = 19 [default = 4294967040];
  if (has_target_proto_addr_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(19, this->target_proto_addr_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Arp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hw_type = 1 [default = 1];
  if (has_hw_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hw_type(), target);
  }
  
  // optional uint32 proto_type = 2 [default = 2048];
  if (has_proto_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proto_type(), target);
  }
  
  // optional uint32 hw_addr_len = 3 [default = 6];
  if (has_hw_addr_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hw_addr_len(), target);
  }
  
  // optional uint32 proto_addr_len = 4 [default = 4];
  if (has_proto_addr_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->proto_addr_len(), target);
  }
  
  // optional uint32 op_code = 5 [default = 1];
  if (has_op_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->op_code(), target);
  }
  
  // optional uint64 sender_hw_addr = 6;
  if (has_sender_hw_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sender_hw_addr(), target);
  }
  
  // optional .OstProto.Arp.HwAddrMode sender_hw_addr_mode = 7 [default = kFixed];
  if (has_sender_hw_addr_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->sender_hw_addr_mode(), target);
  }
  
  // optional uint32 sender_hw_addr_count = 8 [default = 16];
  if (has_sender_hw_addr_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sender_hw_addr_count(), target);
  }
  
  // optional uint32 sender_proto_addr = 9;
  if (has_sender_proto_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sender_proto_addr(), target);
  }
  
  // optional .OstProto.Arp.ProtoAddrMode sender_proto_addr_mode = 10 [default = kFixedHost];
  if (has_sender_proto_addr_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->sender_proto_addr_mode(), target);
  }
  
  // optional uint32 sender_proto_addr_count = 11 [default = 16];
  if (has_sender_proto_addr_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sender_proto_addr_count(), target);
  }
  
  // optional fixed32 sender_proto_addr_mask = 12 [default = 4294967040];
  if (has_sender_proto_addr_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->sender_proto_addr_mask(), target);
  }
  
  // optional uint64 target_hw_addr = 13;
  if (has_target_hw_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->target_hw_addr(), target);
  }
  
  // optional .OstProto.Arp.HwAddrMode target_hw_addr_mode = 14 [default = kFixed];
  if (has_target_hw_addr_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->target_hw_addr_mode(), target);
  }
  
  // optional uint32 target_hw_addr_count = 15 [default = 16];
  if (has_target_hw_addr_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->target_hw_addr_count(), target);
  }
  
  // optional uint32 target_proto_addr = 16;
  if (has_target_proto_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->target_proto_addr(), target);
  }
  
  // optional .OstProto.Arp.ProtoAddrMode target_proto_addr_mode = 17 [default = kFixedHost];
  if (has_target_proto_addr_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->target_proto_addr_mode(), target);
  }
  
  // optional uint32 target_proto_addr_count = 18 [default = 16];
  if (has_target_proto_addr_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->target_proto_addr_count(), target);
  }
  
  // optional fixed32 target_proto_addr_mask = 19 [default = 4294967040];
  if (has_target_proto_addr_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(19, this->target_proto_addr_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Arp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hw_type = 1 [default = 1];
    if (has_hw_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hw_type());
    }
    
    // optional uint32 proto_type = 2 [default = 2048];
    if (has_proto_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proto_type());
    }
    
    // optional uint32 hw_addr_len = 3 [default = 6];
    if (has_hw_addr_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hw_addr_len());
    }
    
    // optional uint32 proto_addr_len = 4 [default = 4];
    if (has_proto_addr_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proto_addr_len());
    }
    
    // optional uint32 op_code = 5 [default = 1];
    if (has_op_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op_code());
    }
    
    // optional uint64 sender_hw_addr = 6;
    if (has_sender_hw_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sender_hw_addr());
    }
    
    // optional .OstProto.Arp.HwAddrMode sender_hw_addr_mode = 7 [default = kFixed];
    if (has_sender_hw_addr_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sender_hw_addr_mode());
    }
    
    // optional uint32 sender_hw_addr_count = 8 [default = 16];
    if (has_sender_hw_addr_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sender_hw_addr_count());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sender_proto_addr = 9;
    if (has_sender_proto_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sender_proto_addr());
    }
    
    // optional .OstProto.Arp.ProtoAddrMode sender_proto_addr_mode = 10 [default = kFixedHost];
    if (has_sender_proto_addr_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sender_proto_addr_mode());
    }
    
    // optional uint32 sender_proto_addr_count = 11 [default = 16];
    if (has_sender_proto_addr_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sender_proto_addr_count());
    }
    
    // optional fixed32 sender_proto_addr_mask = 12 [default = 4294967040];
    if (has_sender_proto_addr_mask()) {
      total_size += 1 + 4;
    }
    
    // optional uint64 target_hw_addr = 13;
    if (has_target_hw_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_hw_addr());
    }
    
    // optional .OstProto.Arp.HwAddrMode target_hw_addr_mode = 14 [default = kFixed];
    if (has_target_hw_addr_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_hw_addr_mode());
    }
    
    // optional uint32 target_hw_addr_count = 15 [default = 16];
    if (has_target_hw_addr_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_hw_addr_count());
    }
    
    // optional uint32 target_proto_addr = 16;
    if (has_target_proto_addr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_proto_addr());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .OstProto.Arp.ProtoAddrMode target_proto_addr_mode = 17 [default = kFixedHost];
    if (has_target_proto_addr_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_proto_addr_mode());
    }
    
    // optional uint32 target_proto_addr_count = 18 [default = 16];
    if (has_target_proto_addr_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_proto_addr_count());
    }
    
    // optional fixed32 target_proto_addr_mask = 19 [default = 4294967040];
    if (has_target_proto_addr_mask()) {
      total_size += 2 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Arp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Arp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Arp::MergeFrom(const Arp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hw_type()) {
      set_hw_type(from.hw_type());
    }
    if (from.has_proto_type()) {
      set_proto_type(from.proto_type());
    }
    if (from.has_hw_addr_len()) {
      set_hw_addr_len(from.hw_addr_len());
    }
    if (from.has_proto_addr_len()) {
      set_proto_addr_len(from.proto_addr_len());
    }
    if (from.has_op_code()) {
      set_op_code(from.op_code());
    }
    if (from.has_sender_hw_addr()) {
      set_sender_hw_addr(from.sender_hw_addr());
    }
    if (from.has_sender_hw_addr_mode()) {
      set_sender_hw_addr_mode(from.sender_hw_addr_mode());
    }
    if (from.has_sender_hw_addr_count()) {
      set_sender_hw_addr_count(from.sender_hw_addr_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sender_proto_addr()) {
      set_sender_proto_addr(from.sender_proto_addr());
    }
    if (from.has_sender_proto_addr_mode()) {
      set_sender_proto_addr_mode(from.sender_proto_addr_mode());
    }
    if (from.has_sender_proto_addr_count()) {
      set_sender_proto_addr_count(from.sender_proto_addr_count());
    }
    if (from.has_sender_proto_addr_mask()) {
      set_sender_proto_addr_mask(from.sender_proto_addr_mask());
    }
    if (from.has_target_hw_addr()) {
      set_target_hw_addr(from.target_hw_addr());
    }
    if (from.has_target_hw_addr_mode()) {
      set_target_hw_addr_mode(from.target_hw_addr_mode());
    }
    if (from.has_target_hw_addr_count()) {
      set_target_hw_addr_count(from.target_hw_addr_count());
    }
    if (from.has_target_proto_addr()) {
      set_target_proto_addr(from.target_proto_addr());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_target_proto_addr_mode()) {
      set_target_proto_addr_mode(from.target_proto_addr_mode());
    }
    if (from.has_target_proto_addr_count()) {
      set_target_proto_addr_count(from.target_proto_addr_count());
    }
    if (from.has_target_proto_addr_mask()) {
      set_target_proto_addr_mask(from.target_proto_addr_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Arp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arp::CopyFrom(const Arp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arp::IsInitialized() const {
  
  return true;
}

void Arp::Swap(Arp* other) {
  if (other != this) {
    std::swap(hw_type_, other->hw_type_);
    std::swap(proto_type_, other->proto_type_);
    std::swap(hw_addr_len_, other->hw_addr_len_);
    std::swap(proto_addr_len_, other->proto_addr_len_);
    std::swap(op_code_, other->op_code_);
    std::swap(sender_hw_addr_, other->sender_hw_addr_);
    std::swap(sender_hw_addr_mode_, other->sender_hw_addr_mode_);
    std::swap(sender_hw_addr_count_, other->sender_hw_addr_count_);
    std::swap(sender_proto_addr_, other->sender_proto_addr_);
    std::swap(sender_proto_addr_mode_, other->sender_proto_addr_mode_);
    std::swap(sender_proto_addr_count_, other->sender_proto_addr_count_);
    std::swap(sender_proto_addr_mask_, other->sender_proto_addr_mask_);
    std::swap(target_hw_addr_, other->target_hw_addr_);
    std::swap(target_hw_addr_mode_, other->target_hw_addr_mode_);
    std::swap(target_hw_addr_count_, other->target_hw_addr_count_);
    std::swap(target_proto_addr_, other->target_proto_addr_);
    std::swap(target_proto_addr_mode_, other->target_proto_addr_mode_);
    std::swap(target_proto_addr_count_, other->target_proto_addr_count_);
    std::swap(target_proto_addr_mask_, other->target_proto_addr_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Arp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Arp_descriptor_;
  metadata.reflection = Arp_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Arp >, 11, false >
  arp(kArpFieldNumber, ::OstProto::Arp::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

// @@protoc_insertion_point(global_scope)
