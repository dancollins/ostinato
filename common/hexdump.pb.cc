// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hexdump.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OstProto {

namespace {

const ::google::protobuf::Descriptor* HexDump_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HexDump_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hexdump_2eproto() {
  protobuf_AddDesc_hexdump_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hexdump.proto");
  GOOGLE_CHECK(file != NULL);
  HexDump_descriptor_ = file->message_type(0);
  static const int HexDump_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HexDump, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HexDump, pad_until_end_),
  };
  HexDump_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HexDump_descriptor_,
      HexDump::default_instance_,
      HexDump_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HexDump, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HexDump, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HexDump));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hexdump_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HexDump_descriptor_, &HexDump::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hexdump_2eproto() {
  delete HexDump::default_instance_;
  delete HexDump_reflection_;
}

void protobuf_AddDesc_hexdump_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::OstProto::protobuf_AddDesc_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rhexdump.proto\022\010OstProto\032\016protocol.prot"
    "o\"7\n\007HexDump\022\017\n\007content\030\001 \001(\014\022\033\n\rpad_unt"
    "il_end\030\002 \001(\010:\004true:6\n\007hexDump\022\022.OstProto"
    ".Protocol\030h \001(\0132\021.OstProto.HexDump", 154);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hexdump.proto", &protobuf_RegisterTypes);
  HexDump::default_instance_ = new HexDump();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::OstProto::Protocol::default_instance(),
    104, 11, false, false,
    &::OstProto::HexDump::default_instance());
  HexDump::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hexdump_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hexdump_2eproto {
  StaticDescriptorInitializer_hexdump_2eproto() {
    protobuf_AddDesc_hexdump_2eproto();
  }
} static_descriptor_initializer_hexdump_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int HexDump::kContentFieldNumber;
const int HexDump::kPadUntilEndFieldNumber;
#endif  // !_MSC_VER

HexDump::HexDump()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HexDump::InitAsDefaultInstance() {
}

HexDump::HexDump(const HexDump& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HexDump::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pad_until_end_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HexDump::~HexDump() {
  SharedDtor();
}

void HexDump::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void HexDump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HexDump::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HexDump_descriptor_;
}

const HexDump& HexDump::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hexdump_2eproto();  return *default_instance_;
}

HexDump* HexDump::default_instance_ = NULL;

HexDump* HexDump::New() const {
  return new HexDump;
}

void HexDump::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    pad_until_end_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HexDump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pad_until_end;
        break;
      }
      
      // optional bool pad_until_end = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad_until_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pad_until_end_)));
          set_has_pad_until_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HexDump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->content(), output);
  }
  
  // optional bool pad_until_end = 2 [default = true];
  if (has_pad_until_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pad_until_end(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HexDump::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }
  
  // optional bool pad_until_end = 2 [default = true];
  if (has_pad_until_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pad_until_end(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HexDump::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
    // optional bool pad_until_end = 2 [default = true];
    if (has_pad_until_end()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HexDump::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HexDump* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HexDump*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HexDump::MergeFrom(const HexDump& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_pad_until_end()) {
      set_pad_until_end(from.pad_until_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HexDump::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HexDump::CopyFrom(const HexDump& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HexDump::IsInitialized() const {
  
  return true;
}

void HexDump::Swap(HexDump* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(pad_until_end_, other->pad_until_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HexDump::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HexDump_descriptor_;
  metadata.reflection = HexDump_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::HexDump >, 11, false >
  hexDump(kHexDumpFieldNumber, ::OstProto::HexDump::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

// @@protoc_insertion_point(global_scope)
