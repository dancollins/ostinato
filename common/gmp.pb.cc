// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gmp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OstProto {

namespace {

const ::google::protobuf::Descriptor* Gmp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gmp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gmp_IpAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gmp_IpAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gmp_GroupRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gmp_GroupRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Gmp_GroupRecord_RecordType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Gmp_GroupMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gmp_2eproto() {
  protobuf_AddDesc_gmp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gmp.proto");
  GOOGLE_CHECK(file != NULL);
  Gmp_descriptor_ = file->message_type(0);
  static const int Gmp_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, is_override_rsvd_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, rsvd_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, max_response_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, is_override_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, group_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, group_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, group_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, group_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, s_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, qrv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, qqi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, is_override_source_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, source_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, group_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, is_override_group_record_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, group_record_count_),
  };
  Gmp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gmp_descriptor_,
      Gmp::default_instance_,
      Gmp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gmp));
  Gmp_IpAddress_descriptor_ = Gmp_descriptor_->nested_type(0);
  static const int Gmp_IpAddress_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_IpAddress, v4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_IpAddress, v6_hi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_IpAddress, v6_lo_),
  };
  Gmp_IpAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gmp_IpAddress_descriptor_,
      Gmp_IpAddress::default_instance_,
      Gmp_IpAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_IpAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_IpAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gmp_IpAddress));
  Gmp_GroupRecord_descriptor_ = Gmp_descriptor_->nested_type(1);
  static const int Gmp_GroupRecord_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_GroupRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_GroupRecord, group_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_GroupRecord, sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_GroupRecord, is_override_source_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_GroupRecord, source_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_GroupRecord, aux_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_GroupRecord, is_override_aux_data_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_GroupRecord, aux_data_length_),
  };
  Gmp_GroupRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gmp_GroupRecord_descriptor_,
      Gmp_GroupRecord::default_instance_,
      Gmp_GroupRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_GroupRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gmp_GroupRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gmp_GroupRecord));
  Gmp_GroupRecord_RecordType_descriptor_ = Gmp_GroupRecord_descriptor_->enum_type(0);
  Gmp_GroupMode_descriptor_ = Gmp_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gmp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gmp_descriptor_, &Gmp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gmp_IpAddress_descriptor_, &Gmp_IpAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gmp_GroupRecord_descriptor_, &Gmp_GroupRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gmp_2eproto() {
  delete Gmp::default_instance_;
  delete Gmp_reflection_;
  delete Gmp_IpAddress::default_instance_;
  delete Gmp_IpAddress_reflection_;
  delete Gmp_GroupRecord::default_instance_;
  delete Gmp_GroupRecord_reflection_;
}

void protobuf_AddDesc_gmp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::OstProto::protobuf_AddDesc_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tgmp.proto\022\010OstProto\032\016protocol.proto\"\360\010"
    "\n\003Gmp\022\014\n\004type\030\001 \001(\r\022\035\n\025is_override_rsvd_"
    "code\030\002 \001(\010\022\021\n\trsvd_code\030\003 \001(\r\022\036\n\021max_res"
    "ponse_time\030\004 \001(\r:\003100\022\034\n\024is_override_che"
    "cksum\030\005 \001(\010\022\020\n\010checksum\030\006 \001(\r\022.\n\rgroup_a"
    "ddress\030\n \001(\0132\027.OstProto.Gmp.IpAddress\0223\n"
    "\ngroup_mode\030\013 \001(\0162\027.OstProto.Gmp.GroupMo"
    "de:\006kFixed\022\027\n\013group_count\030\014 \001(\r:\00216\022\030\n\014g"
    "roup_prefix\030\r \001(\r:\00224\022\016\n\006s_flag\030\024 \001(\010\022\016\n"
    "\003qrv\030\025 \001(\r:\0012\022\020\n\003qqi\030\026 \001(\r:\003125\022(\n\007sourc"
    "es\030\027 \003(\0132\027.OstProto.Gmp.IpAddress\022 \n\030is_"
    "override_source_count\030\030 \001(\010\022\024\n\014source_co"
    "unt\030\031 \001(\r\0220\n\rgroup_records\030\036 \003(\0132\031.OstPr"
    "oto.Gmp.GroupRecord\022&\n\036is_override_group"
    "_record_count\030\037 \001(\010\022\032\n\022group_record_coun"
    "t\030  \001(\r\0325\n\tIpAddress\022\n\n\002v4\030\001 \001(\007\022\r\n\005v6_h"
    "i\030\002 \001(\006\022\r\n\005v6_lo\030\003 \001(\006\032\252\003\n\013GroupRecord\022>"
    "\n\004type\030\001 \001(\0162$.OstProto.Gmp.GroupRecord."
    "RecordType:\nkIsInclude\022.\n\rgroup_address\030"
    "\002 \001(\0132\027.OstProto.Gmp.IpAddress\022(\n\007source"
    "s\030\003 \003(\0132\027.OstProto.Gmp.IpAddress\022 \n\030is_o"
    "verride_source_count\030\004 \001(\010\022\024\n\014source_cou"
    "nt\030\005 \001(\r\022\020\n\010aux_data\030\006 \001(\014\022#\n\033is_overrid"
    "e_aux_data_length\030\007 \001(\010\022\027\n\017aux_data_leng"
    "th\030\010 \001(\r\"y\n\nRecordType\022\r\n\tkReserved\020\000\022\016\n"
    "\nkIsInclude\020\001\022\016\n\nkIsExclude\020\002\022\016\n\nkToIncl"
    "ude\020\003\022\016\n\nkToExclude\020\004\022\r\n\tkAllowNew\020\005\022\r\n\t"
    "kBlockOld\020\006\"S\n\tGroupMode\022\n\n\006kFixed\020\000\022\023\n\017"
    "kIncrementGroup\020\001\022\023\n\017kDecrementGroup\020\002\022\020"
    "\n\014kRandomGroup\020\003", 1176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gmp.proto", &protobuf_RegisterTypes);
  Gmp::default_instance_ = new Gmp();
  Gmp_IpAddress::default_instance_ = new Gmp_IpAddress();
  Gmp_GroupRecord::default_instance_ = new Gmp_GroupRecord();
  Gmp::default_instance_->InitAsDefaultInstance();
  Gmp_IpAddress::default_instance_->InitAsDefaultInstance();
  Gmp_GroupRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gmp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gmp_2eproto {
  StaticDescriptorInitializer_gmp_2eproto() {
    protobuf_AddDesc_gmp_2eproto();
  }
} static_descriptor_initializer_gmp_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Gmp_GroupMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gmp_GroupMode_descriptor_;
}
bool Gmp_GroupMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Gmp_GroupMode Gmp::kFixed;
const Gmp_GroupMode Gmp::kIncrementGroup;
const Gmp_GroupMode Gmp::kDecrementGroup;
const Gmp_GroupMode Gmp::kRandomGroup;
const Gmp_GroupMode Gmp::GroupMode_MIN;
const Gmp_GroupMode Gmp::GroupMode_MAX;
const int Gmp::GroupMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Gmp_IpAddress::kV4FieldNumber;
const int Gmp_IpAddress::kV6HiFieldNumber;
const int Gmp_IpAddress::kV6LoFieldNumber;
#endif  // !_MSC_VER

Gmp_IpAddress::Gmp_IpAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Gmp_IpAddress::InitAsDefaultInstance() {
}

Gmp_IpAddress::Gmp_IpAddress(const Gmp_IpAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Gmp_IpAddress::SharedCtor() {
  _cached_size_ = 0;
  v4_ = 0u;
  v6_hi_ = GOOGLE_ULONGLONG(0);
  v6_lo_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gmp_IpAddress::~Gmp_IpAddress() {
  SharedDtor();
}

void Gmp_IpAddress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gmp_IpAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gmp_IpAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gmp_IpAddress_descriptor_;
}

const Gmp_IpAddress& Gmp_IpAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmp_2eproto();  return *default_instance_;
}

Gmp_IpAddress* Gmp_IpAddress::default_instance_ = NULL;

Gmp_IpAddress* Gmp_IpAddress::New() const {
  return new Gmp_IpAddress;
}

void Gmp_IpAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    v4_ = 0u;
    v6_hi_ = GOOGLE_ULONGLONG(0);
    v6_lo_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gmp_IpAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 v4 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &v4_)));
          set_has_v4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_v6_hi;
        break;
      }
      
      // optional fixed64 v6_hi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_v6_hi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &v6_hi_)));
          set_has_v6_hi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_v6_lo;
        break;
      }
      
      // optional fixed64 v6_lo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_v6_lo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &v6_lo_)));
          set_has_v6_lo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Gmp_IpAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 v4 = 1;
  if (has_v4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->v4(), output);
  }
  
  // optional fixed64 v6_hi = 2;
  if (has_v6_hi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->v6_hi(), output);
  }
  
  // optional fixed64 v6_lo = 3;
  if (has_v6_lo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->v6_lo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Gmp_IpAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 v4 = 1;
  if (has_v4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->v4(), target);
  }
  
  // optional fixed64 v6_hi = 2;
  if (has_v6_hi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->v6_hi(), target);
  }
  
  // optional fixed64 v6_lo = 3;
  if (has_v6_lo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->v6_lo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Gmp_IpAddress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 v4 = 1;
    if (has_v4()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 v6_hi = 2;
    if (has_v6_hi()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 v6_lo = 3;
    if (has_v6_lo()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gmp_IpAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gmp_IpAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gmp_IpAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gmp_IpAddress::MergeFrom(const Gmp_IpAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v4()) {
      set_v4(from.v4());
    }
    if (from.has_v6_hi()) {
      set_v6_hi(from.v6_hi());
    }
    if (from.has_v6_lo()) {
      set_v6_lo(from.v6_lo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gmp_IpAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gmp_IpAddress::CopyFrom(const Gmp_IpAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gmp_IpAddress::IsInitialized() const {
  
  return true;
}

void Gmp_IpAddress::Swap(Gmp_IpAddress* other) {
  if (other != this) {
    std::swap(v4_, other->v4_);
    std::swap(v6_hi_, other->v6_hi_);
    std::swap(v6_lo_, other->v6_lo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gmp_IpAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gmp_IpAddress_descriptor_;
  metadata.reflection = Gmp_IpAddress_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Gmp_GroupRecord_RecordType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gmp_GroupRecord_RecordType_descriptor_;
}
bool Gmp_GroupRecord_RecordType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Gmp_GroupRecord_RecordType Gmp_GroupRecord::kReserved;
const Gmp_GroupRecord_RecordType Gmp_GroupRecord::kIsInclude;
const Gmp_GroupRecord_RecordType Gmp_GroupRecord::kIsExclude;
const Gmp_GroupRecord_RecordType Gmp_GroupRecord::kToInclude;
const Gmp_GroupRecord_RecordType Gmp_GroupRecord::kToExclude;
const Gmp_GroupRecord_RecordType Gmp_GroupRecord::kAllowNew;
const Gmp_GroupRecord_RecordType Gmp_GroupRecord::kBlockOld;
const Gmp_GroupRecord_RecordType Gmp_GroupRecord::RecordType_MIN;
const Gmp_GroupRecord_RecordType Gmp_GroupRecord::RecordType_MAX;
const int Gmp_GroupRecord::RecordType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Gmp_GroupRecord::kTypeFieldNumber;
const int Gmp_GroupRecord::kGroupAddressFieldNumber;
const int Gmp_GroupRecord::kSourcesFieldNumber;
const int Gmp_GroupRecord::kIsOverrideSourceCountFieldNumber;
const int Gmp_GroupRecord::kSourceCountFieldNumber;
const int Gmp_GroupRecord::kAuxDataFieldNumber;
const int Gmp_GroupRecord::kIsOverrideAuxDataLengthFieldNumber;
const int Gmp_GroupRecord::kAuxDataLengthFieldNumber;
#endif  // !_MSC_VER

Gmp_GroupRecord::Gmp_GroupRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Gmp_GroupRecord::InitAsDefaultInstance() {
  group_address_ = const_cast< ::OstProto::Gmp_IpAddress*>(&::OstProto::Gmp_IpAddress::default_instance());
}

Gmp_GroupRecord::Gmp_GroupRecord(const Gmp_GroupRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Gmp_GroupRecord::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  group_address_ = NULL;
  is_override_source_count_ = false;
  source_count_ = 0u;
  aux_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_override_aux_data_length_ = false;
  aux_data_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gmp_GroupRecord::~Gmp_GroupRecord() {
  SharedDtor();
}

void Gmp_GroupRecord::SharedDtor() {
  if (aux_data_ != &::google::protobuf::internal::kEmptyString) {
    delete aux_data_;
  }
  if (this != default_instance_) {
    delete group_address_;
  }
}

void Gmp_GroupRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gmp_GroupRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gmp_GroupRecord_descriptor_;
}

const Gmp_GroupRecord& Gmp_GroupRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmp_2eproto();  return *default_instance_;
}

Gmp_GroupRecord* Gmp_GroupRecord::default_instance_ = NULL;

Gmp_GroupRecord* Gmp_GroupRecord::New() const {
  return new Gmp_GroupRecord;
}

void Gmp_GroupRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_group_address()) {
      if (group_address_ != NULL) group_address_->::OstProto::Gmp_IpAddress::Clear();
    }
    is_override_source_count_ = false;
    source_count_ = 0u;
    if (has_aux_data()) {
      if (aux_data_ != &::google::protobuf::internal::kEmptyString) {
        aux_data_->clear();
      }
    }
    is_override_aux_data_length_ = false;
    aux_data_length_ = 0u;
  }
  sources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gmp_GroupRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OstProto.Gmp.GroupRecord.RecordType type = 1 [default = kIsInclude];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OstProto::Gmp_GroupRecord_RecordType_IsValid(value)) {
            set_type(static_cast< ::OstProto::Gmp_GroupRecord_RecordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_address;
        break;
      }
      
      // optional .OstProto.Gmp.IpAddress group_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sources;
        break;
      }
      
      // repeated .OstProto.Gmp.IpAddress sources = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sources;
        if (input->ExpectTag(32)) goto parse_is_override_source_count;
        break;
      }
      
      // optional bool is_override_source_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_source_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_source_count_)));
          set_has_is_override_source_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_source_count;
        break;
      }
      
      // optional uint32 source_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_count_)));
          set_has_source_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_aux_data;
        break;
      }
      
      // optional bytes aux_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aux_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_aux_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_override_aux_data_length;
        break;
      }
      
      // optional bool is_override_aux_data_length = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_aux_data_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_aux_data_length_)));
          set_has_is_override_aux_data_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_aux_data_length;
        break;
      }
      
      // optional uint32 aux_data_length = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aux_data_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aux_data_length_)));
          set_has_aux_data_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Gmp_GroupRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .OstProto.Gmp.GroupRecord.RecordType type = 1 [default = kIsInclude];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .OstProto.Gmp.IpAddress group_address = 2;
  if (has_group_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_address(), output);
  }
  
  // repeated .OstProto.Gmp.IpAddress sources = 3;
  for (int i = 0; i < this->sources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sources(i), output);
  }
  
  // optional bool is_override_source_count = 4;
  if (has_is_override_source_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_override_source_count(), output);
  }
  
  // optional uint32 source_count = 5;
  if (has_source_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_count(), output);
  }
  
  // optional bytes aux_data = 6;
  if (has_aux_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->aux_data(), output);
  }
  
  // optional bool is_override_aux_data_length = 7;
  if (has_is_override_aux_data_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_override_aux_data_length(), output);
  }
  
  // optional uint32 aux_data_length = 8;
  if (has_aux_data_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->aux_data_length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Gmp_GroupRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .OstProto.Gmp.GroupRecord.RecordType type = 1 [default = kIsInclude];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .OstProto.Gmp.IpAddress group_address = 2;
  if (has_group_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_address(), target);
  }
  
  // repeated .OstProto.Gmp.IpAddress sources = 3;
  for (int i = 0; i < this->sources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sources(i), target);
  }
  
  // optional bool is_override_source_count = 4;
  if (has_is_override_source_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_override_source_count(), target);
  }
  
  // optional uint32 source_count = 5;
  if (has_source_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_count(), target);
  }
  
  // optional bytes aux_data = 6;
  if (has_aux_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->aux_data(), target);
  }
  
  // optional bool is_override_aux_data_length = 7;
  if (has_is_override_aux_data_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_override_aux_data_length(), target);
  }
  
  // optional uint32 aux_data_length = 8;
  if (has_aux_data_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->aux_data_length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Gmp_GroupRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .OstProto.Gmp.GroupRecord.RecordType type = 1 [default = kIsInclude];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .OstProto.Gmp.IpAddress group_address = 2;
    if (has_group_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_address());
    }
    
    // optional bool is_override_source_count = 4;
    if (has_is_override_source_count()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 source_count = 5;
    if (has_source_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_count());
    }
    
    // optional bytes aux_data = 6;
    if (has_aux_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->aux_data());
    }
    
    // optional bool is_override_aux_data_length = 7;
    if (has_is_override_aux_data_length()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 aux_data_length = 8;
    if (has_aux_data_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aux_data_length());
    }
    
  }
  // repeated .OstProto.Gmp.IpAddress sources = 3;
  total_size += 1 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gmp_GroupRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gmp_GroupRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gmp_GroupRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gmp_GroupRecord::MergeFrom(const Gmp_GroupRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  sources_.MergeFrom(from.sources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_group_address()) {
      mutable_group_address()->::OstProto::Gmp_IpAddress::MergeFrom(from.group_address());
    }
    if (from.has_is_override_source_count()) {
      set_is_override_source_count(from.is_override_source_count());
    }
    if (from.has_source_count()) {
      set_source_count(from.source_count());
    }
    if (from.has_aux_data()) {
      set_aux_data(from.aux_data());
    }
    if (from.has_is_override_aux_data_length()) {
      set_is_override_aux_data_length(from.is_override_aux_data_length());
    }
    if (from.has_aux_data_length()) {
      set_aux_data_length(from.aux_data_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gmp_GroupRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gmp_GroupRecord::CopyFrom(const Gmp_GroupRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gmp_GroupRecord::IsInitialized() const {
  
  return true;
}

void Gmp_GroupRecord::Swap(Gmp_GroupRecord* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(group_address_, other->group_address_);
    sources_.Swap(&other->sources_);
    std::swap(is_override_source_count_, other->is_override_source_count_);
    std::swap(source_count_, other->source_count_);
    std::swap(aux_data_, other->aux_data_);
    std::swap(is_override_aux_data_length_, other->is_override_aux_data_length_);
    std::swap(aux_data_length_, other->aux_data_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gmp_GroupRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gmp_GroupRecord_descriptor_;
  metadata.reflection = Gmp_GroupRecord_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Gmp::kTypeFieldNumber;
const int Gmp::kIsOverrideRsvdCodeFieldNumber;
const int Gmp::kRsvdCodeFieldNumber;
const int Gmp::kMaxResponseTimeFieldNumber;
const int Gmp::kIsOverrideChecksumFieldNumber;
const int Gmp::kChecksumFieldNumber;
const int Gmp::kGroupAddressFieldNumber;
const int Gmp::kGroupModeFieldNumber;
const int Gmp::kGroupCountFieldNumber;
const int Gmp::kGroupPrefixFieldNumber;
const int Gmp::kSFlagFieldNumber;
const int Gmp::kQrvFieldNumber;
const int Gmp::kQqiFieldNumber;
const int Gmp::kSourcesFieldNumber;
const int Gmp::kIsOverrideSourceCountFieldNumber;
const int Gmp::kSourceCountFieldNumber;
const int Gmp::kGroupRecordsFieldNumber;
const int Gmp::kIsOverrideGroupRecordCountFieldNumber;
const int Gmp::kGroupRecordCountFieldNumber;
#endif  // !_MSC_VER

Gmp::Gmp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Gmp::InitAsDefaultInstance() {
  group_address_ = const_cast< ::OstProto::Gmp_IpAddress*>(&::OstProto::Gmp_IpAddress::default_instance());
}

Gmp::Gmp(const Gmp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Gmp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  is_override_rsvd_code_ = false;
  rsvd_code_ = 0u;
  max_response_time_ = 100u;
  is_override_checksum_ = false;
  checksum_ = 0u;
  group_address_ = NULL;
  group_mode_ = 0;
  group_count_ = 16u;
  group_prefix_ = 24u;
  s_flag_ = false;
  qrv_ = 2u;
  qqi_ = 125u;
  is_override_source_count_ = false;
  source_count_ = 0u;
  is_override_group_record_count_ = false;
  group_record_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gmp::~Gmp() {
  SharedDtor();
}

void Gmp::SharedDtor() {
  if (this != default_instance_) {
    delete group_address_;
  }
}

void Gmp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gmp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gmp_descriptor_;
}

const Gmp& Gmp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmp_2eproto();  return *default_instance_;
}

Gmp* Gmp::default_instance_ = NULL;

Gmp* Gmp::New() const {
  return new Gmp;
}

void Gmp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    is_override_rsvd_code_ = false;
    rsvd_code_ = 0u;
    max_response_time_ = 100u;
    is_override_checksum_ = false;
    checksum_ = 0u;
    if (has_group_address()) {
      if (group_address_ != NULL) group_address_->::OstProto::Gmp_IpAddress::Clear();
    }
    group_mode_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    group_count_ = 16u;
    group_prefix_ = 24u;
    s_flag_ = false;
    qrv_ = 2u;
    qqi_ = 125u;
    is_override_source_count_ = false;
    source_count_ = 0u;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    is_override_group_record_count_ = false;
    group_record_count_ = 0u;
  }
  sources_.Clear();
  group_records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gmp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_override_rsvd_code;
        break;
      }
      
      // optional bool is_override_rsvd_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_rsvd_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_rsvd_code_)));
          set_has_is_override_rsvd_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rsvd_code;
        break;
      }
      
      // optional uint32 rsvd_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rsvd_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rsvd_code_)));
          set_has_rsvd_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_response_time;
        break;
      }
      
      // optional uint32 max_response_time = 4 [default = 100];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_response_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_response_time_)));
          set_has_max_response_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_override_checksum;
        break;
      }
      
      // optional bool is_override_checksum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_checksum_)));
          set_has_is_override_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_checksum;
        break;
      }
      
      // optional uint32 checksum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_group_address;
        break;
      }
      
      // optional .OstProto.Gmp.IpAddress group_address = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_group_mode;
        break;
      }
      
      // optional .OstProto.Gmp.GroupMode group_mode = 11 [default = kFixed];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OstProto::Gmp_GroupMode_IsValid(value)) {
            set_group_mode(static_cast< ::OstProto::Gmp_GroupMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_group_count;
        break;
      }
      
      // optional uint32 group_count = 12 [default = 16];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_count_)));
          set_has_group_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_group_prefix;
        break;
      }
      
      // optional uint32 group_prefix = 13 [default = 24];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_prefix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_prefix_)));
          set_has_group_prefix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_s_flag;
        break;
      }
      
      // optional bool s_flag = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_s_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &s_flag_)));
          set_has_s_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_qrv;
        break;
      }
      
      // optional uint32 qrv = 21 [default = 2];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qrv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qrv_)));
          set_has_qrv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_qqi;
        break;
      }
      
      // optional uint32 qqi = 22 [default = 125];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qqi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qqi_)));
          set_has_qqi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_sources;
        break;
      }
      
      // repeated .OstProto.Gmp.IpAddress sources = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_sources;
        if (input->ExpectTag(192)) goto parse_is_override_source_count;
        break;
      }
      
      // optional bool is_override_source_count = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_source_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_source_count_)));
          set_has_is_override_source_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_source_count;
        break;
      }
      
      // optional uint32 source_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_count_)));
          set_has_source_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_group_records;
        break;
      }
      
      // repeated .OstProto.Gmp.GroupRecord group_records = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_group_records;
        if (input->ExpectTag(248)) goto parse_is_override_group_record_count;
        break;
      }
      
      // optional bool is_override_group_record_count = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_override_group_record_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_override_group_record_count_)));
          set_has_is_override_group_record_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_group_record_count;
        break;
      }
      
      // optional uint32 group_record_count = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_record_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_record_count_)));
          set_has_group_record_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Gmp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional bool is_override_rsvd_code = 2;
  if (has_is_override_rsvd_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_override_rsvd_code(), output);
  }
  
  // optional uint32 rsvd_code = 3;
  if (has_rsvd_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rsvd_code(), output);
  }
  
  // optional uint32 max_response_time = 4 [default = 100];
  if (has_max_response_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_response_time(), output);
  }
  
  // optional bool is_override_checksum = 5;
  if (has_is_override_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_override_checksum(), output);
  }
  
  // optional uint32 checksum = 6;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->checksum(), output);
  }
  
  // optional .OstProto.Gmp.IpAddress group_address = 10;
  if (has_group_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->group_address(), output);
  }
  
  // optional .OstProto.Gmp.GroupMode group_mode = 11 [default = kFixed];
  if (has_group_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->group_mode(), output);
  }
  
  // optional uint32 group_count = 12 [default = 16];
  if (has_group_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->group_count(), output);
  }
  
  // optional uint32 group_prefix = 13 [default = 24];
  if (has_group_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->group_prefix(), output);
  }
  
  // optional bool s_flag = 20;
  if (has_s_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->s_flag(), output);
  }
  
  // optional uint32 qrv = 21 [default = 2];
  if (has_qrv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->qrv(), output);
  }
  
  // optional uint32 qqi = 22 [default = 125];
  if (has_qqi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->qqi(), output);
  }
  
  // repeated .OstProto.Gmp.IpAddress sources = 23;
  for (int i = 0; i < this->sources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->sources(i), output);
  }
  
  // optional bool is_override_source_count = 24;
  if (has_is_override_source_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_override_source_count(), output);
  }
  
  // optional uint32 source_count = 25;
  if (has_source_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->source_count(), output);
  }
  
  // repeated .OstProto.Gmp.GroupRecord group_records = 30;
  for (int i = 0; i < this->group_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->group_records(i), output);
  }
  
  // optional bool is_override_group_record_count = 31;
  if (has_is_override_group_record_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->is_override_group_record_count(), output);
  }
  
  // optional uint32 group_record_count = 32;
  if (has_group_record_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->group_record_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Gmp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional bool is_override_rsvd_code = 2;
  if (has_is_override_rsvd_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_override_rsvd_code(), target);
  }
  
  // optional uint32 rsvd_code = 3;
  if (has_rsvd_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rsvd_code(), target);
  }
  
  // optional uint32 max_response_time = 4 [default = 100];
  if (has_max_response_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_response_time(), target);
  }
  
  // optional bool is_override_checksum = 5;
  if (has_is_override_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_override_checksum(), target);
  }
  
  // optional uint32 checksum = 6;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->checksum(), target);
  }
  
  // optional .OstProto.Gmp.IpAddress group_address = 10;
  if (has_group_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->group_address(), target);
  }
  
  // optional .OstProto.Gmp.GroupMode group_mode = 11 [default = kFixed];
  if (has_group_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->group_mode(), target);
  }
  
  // optional uint32 group_count = 12 [default = 16];
  if (has_group_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->group_count(), target);
  }
  
  // optional uint32 group_prefix = 13 [default = 24];
  if (has_group_prefix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->group_prefix(), target);
  }
  
  // optional bool s_flag = 20;
  if (has_s_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->s_flag(), target);
  }
  
  // optional uint32 qrv = 21 [default = 2];
  if (has_qrv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->qrv(), target);
  }
  
  // optional uint32 qqi = 22 [default = 125];
  if (has_qqi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->qqi(), target);
  }
  
  // repeated .OstProto.Gmp.IpAddress sources = 23;
  for (int i = 0; i < this->sources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->sources(i), target);
  }
  
  // optional bool is_override_source_count = 24;
  if (has_is_override_source_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_override_source_count(), target);
  }
  
  // optional uint32 source_count = 25;
  if (has_source_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->source_count(), target);
  }
  
  // repeated .OstProto.Gmp.GroupRecord group_records = 30;
  for (int i = 0; i < this->group_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->group_records(i), target);
  }
  
  // optional bool is_override_group_record_count = 31;
  if (has_is_override_group_record_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->is_override_group_record_count(), target);
  }
  
  // optional uint32 group_record_count = 32;
  if (has_group_record_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->group_record_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Gmp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional bool is_override_rsvd_code = 2;
    if (has_is_override_rsvd_code()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 rsvd_code = 3;
    if (has_rsvd_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rsvd_code());
    }
    
    // optional uint32 max_response_time = 4 [default = 100];
    if (has_max_response_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_response_time());
    }
    
    // optional bool is_override_checksum = 5;
    if (has_is_override_checksum()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 checksum = 6;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checksum());
    }
    
    // optional .OstProto.Gmp.IpAddress group_address = 10;
    if (has_group_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_address());
    }
    
    // optional .OstProto.Gmp.GroupMode group_mode = 11 [default = kFixed];
    if (has_group_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_mode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 group_count = 12 [default = 16];
    if (has_group_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_count());
    }
    
    // optional uint32 group_prefix = 13 [default = 24];
    if (has_group_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_prefix());
    }
    
    // optional bool s_flag = 20;
    if (has_s_flag()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 qrv = 21 [default = 2];
    if (has_qrv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qrv());
    }
    
    // optional uint32 qqi = 22 [default = 125];
    if (has_qqi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qqi());
    }
    
    // optional bool is_override_source_count = 24;
    if (has_is_override_source_count()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 source_count = 25;
    if (has_source_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_count());
    }
    
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional bool is_override_group_record_count = 31;
    if (has_is_override_group_record_count()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 group_record_count = 32;
    if (has_group_record_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_record_count());
    }
    
  }
  // repeated .OstProto.Gmp.IpAddress sources = 23;
  total_size += 2 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }
  
  // repeated .OstProto.Gmp.GroupRecord group_records = 30;
  total_size += 2 * this->group_records_size();
  for (int i = 0; i < this->group_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_records(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gmp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gmp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gmp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gmp::MergeFrom(const Gmp& from) {
  GOOGLE_CHECK_NE(&from, this);
  sources_.MergeFrom(from.sources_);
  group_records_.MergeFrom(from.group_records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_override_rsvd_code()) {
      set_is_override_rsvd_code(from.is_override_rsvd_code());
    }
    if (from.has_rsvd_code()) {
      set_rsvd_code(from.rsvd_code());
    }
    if (from.has_max_response_time()) {
      set_max_response_time(from.max_response_time());
    }
    if (from.has_is_override_checksum()) {
      set_is_override_checksum(from.is_override_checksum());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
    if (from.has_group_address()) {
      mutable_group_address()->::OstProto::Gmp_IpAddress::MergeFrom(from.group_address());
    }
    if (from.has_group_mode()) {
      set_group_mode(from.group_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_group_count()) {
      set_group_count(from.group_count());
    }
    if (from.has_group_prefix()) {
      set_group_prefix(from.group_prefix());
    }
    if (from.has_s_flag()) {
      set_s_flag(from.s_flag());
    }
    if (from.has_qrv()) {
      set_qrv(from.qrv());
    }
    if (from.has_qqi()) {
      set_qqi(from.qqi());
    }
    if (from.has_is_override_source_count()) {
      set_is_override_source_count(from.is_override_source_count());
    }
    if (from.has_source_count()) {
      set_source_count(from.source_count());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_is_override_group_record_count()) {
      set_is_override_group_record_count(from.is_override_group_record_count());
    }
    if (from.has_group_record_count()) {
      set_group_record_count(from.group_record_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gmp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gmp::CopyFrom(const Gmp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gmp::IsInitialized() const {
  
  return true;
}

void Gmp::Swap(Gmp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(is_override_rsvd_code_, other->is_override_rsvd_code_);
    std::swap(rsvd_code_, other->rsvd_code_);
    std::swap(max_response_time_, other->max_response_time_);
    std::swap(is_override_checksum_, other->is_override_checksum_);
    std::swap(checksum_, other->checksum_);
    std::swap(group_address_, other->group_address_);
    std::swap(group_mode_, other->group_mode_);
    std::swap(group_count_, other->group_count_);
    std::swap(group_prefix_, other->group_prefix_);
    std::swap(s_flag_, other->s_flag_);
    std::swap(qrv_, other->qrv_);
    std::swap(qqi_, other->qqi_);
    sources_.Swap(&other->sources_);
    std::swap(is_override_source_count_, other->is_override_source_count_);
    std::swap(source_count_, other->source_count_);
    group_records_.Swap(&other->group_records_);
    std::swap(is_override_group_record_count_, other->is_override_group_record_count_);
    std::swap(group_record_count_, other->group_record_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gmp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gmp_descriptor_;
  metadata.reflection = Gmp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

// @@protoc_insertion_point(global_scope)
