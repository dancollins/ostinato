// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: udp.proto

#ifndef PROTOBUF_udp_2eproto__INCLUDED
#define PROTOBUF_udp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "protocol.pb.h"
// @@protoc_insertion_point(includes)

namespace OstProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_udp_2eproto();
void protobuf_AssignDesc_udp_2eproto();
void protobuf_ShutdownFile_udp_2eproto();

class Udp;

// ===================================================================

class Udp : public ::google::protobuf::Message {
 public:
  Udp();
  virtual ~Udp();
  
  Udp(const Udp& from);
  
  inline Udp& operator=(const Udp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Udp& default_instance();
  
  void Swap(Udp* other);
  
  // implements Message ----------------------------------------------
  
  Udp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Udp& from);
  void MergeFrom(const Udp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool is_override_src_port = 1;
  inline bool has_is_override_src_port() const;
  inline void clear_is_override_src_port();
  static const int kIsOverrideSrcPortFieldNumber = 1;
  inline bool is_override_src_port() const;
  inline void set_is_override_src_port(bool value);
  
  // optional bool is_override_dst_port = 2;
  inline bool has_is_override_dst_port() const;
  inline void clear_is_override_dst_port();
  static const int kIsOverrideDstPortFieldNumber = 2;
  inline bool is_override_dst_port() const;
  inline void set_is_override_dst_port(bool value);
  
  // optional bool is_override_totlen = 3;
  inline bool has_is_override_totlen() const;
  inline void clear_is_override_totlen();
  static const int kIsOverrideTotlenFieldNumber = 3;
  inline bool is_override_totlen() const;
  inline void set_is_override_totlen(bool value);
  
  // optional bool is_override_cksum = 4;
  inline bool has_is_override_cksum() const;
  inline void clear_is_override_cksum();
  static const int kIsOverrideCksumFieldNumber = 4;
  inline bool is_override_cksum() const;
  inline void set_is_override_cksum(bool value);
  
  // optional uint32 src_port = 5 [default = 49152];
  inline bool has_src_port() const;
  inline void clear_src_port();
  static const int kSrcPortFieldNumber = 5;
  inline ::google::protobuf::uint32 src_port() const;
  inline void set_src_port(::google::protobuf::uint32 value);
  
  // optional uint32 dst_port = 6 [default = 49153];
  inline bool has_dst_port() const;
  inline void clear_dst_port();
  static const int kDstPortFieldNumber = 6;
  inline ::google::protobuf::uint32 dst_port() const;
  inline void set_dst_port(::google::protobuf::uint32 value);
  
  // optional uint32 totlen = 7;
  inline bool has_totlen() const;
  inline void clear_totlen();
  static const int kTotlenFieldNumber = 7;
  inline ::google::protobuf::uint32 totlen() const;
  inline void set_totlen(::google::protobuf::uint32 value);
  
  // optional uint32 cksum = 8;
  inline bool has_cksum() const;
  inline void clear_cksum();
  static const int kCksumFieldNumber = 8;
  inline ::google::protobuf::uint32 cksum() const;
  inline void set_cksum(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:OstProto.Udp)
 private:
  inline void set_has_is_override_src_port();
  inline void clear_has_is_override_src_port();
  inline void set_has_is_override_dst_port();
  inline void clear_has_is_override_dst_port();
  inline void set_has_is_override_totlen();
  inline void clear_has_is_override_totlen();
  inline void set_has_is_override_cksum();
  inline void clear_has_is_override_cksum();
  inline void set_has_src_port();
  inline void clear_has_src_port();
  inline void set_has_dst_port();
  inline void clear_has_dst_port();
  inline void set_has_totlen();
  inline void clear_has_totlen();
  inline void set_has_cksum();
  inline void clear_has_cksum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool is_override_src_port_;
  bool is_override_dst_port_;
  bool is_override_totlen_;
  bool is_override_cksum_;
  ::google::protobuf::uint32 src_port_;
  ::google::protobuf::uint32 dst_port_;
  ::google::protobuf::uint32 totlen_;
  ::google::protobuf::uint32 cksum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_udp_2eproto();
  friend void protobuf_AssignDesc_udp_2eproto();
  friend void protobuf_ShutdownFile_udp_2eproto();
  
  void InitAsDefaultInstance();
  static Udp* default_instance_;
};
// ===================================================================

static const int kUdpFieldNumber = 401;
extern ::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Udp >, 11, false >
  udp;

// ===================================================================

// Udp

// optional bool is_override_src_port = 1;
inline bool Udp::has_is_override_src_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Udp::set_has_is_override_src_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Udp::clear_has_is_override_src_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Udp::clear_is_override_src_port() {
  is_override_src_port_ = false;
  clear_has_is_override_src_port();
}
inline bool Udp::is_override_src_port() const {
  return is_override_src_port_;
}
inline void Udp::set_is_override_src_port(bool value) {
  set_has_is_override_src_port();
  is_override_src_port_ = value;
}

// optional bool is_override_dst_port = 2;
inline bool Udp::has_is_override_dst_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Udp::set_has_is_override_dst_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Udp::clear_has_is_override_dst_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Udp::clear_is_override_dst_port() {
  is_override_dst_port_ = false;
  clear_has_is_override_dst_port();
}
inline bool Udp::is_override_dst_port() const {
  return is_override_dst_port_;
}
inline void Udp::set_is_override_dst_port(bool value) {
  set_has_is_override_dst_port();
  is_override_dst_port_ = value;
}

// optional bool is_override_totlen = 3;
inline bool Udp::has_is_override_totlen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Udp::set_has_is_override_totlen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Udp::clear_has_is_override_totlen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Udp::clear_is_override_totlen() {
  is_override_totlen_ = false;
  clear_has_is_override_totlen();
}
inline bool Udp::is_override_totlen() const {
  return is_override_totlen_;
}
inline void Udp::set_is_override_totlen(bool value) {
  set_has_is_override_totlen();
  is_override_totlen_ = value;
}

// optional bool is_override_cksum = 4;
inline bool Udp::has_is_override_cksum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Udp::set_has_is_override_cksum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Udp::clear_has_is_override_cksum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Udp::clear_is_override_cksum() {
  is_override_cksum_ = false;
  clear_has_is_override_cksum();
}
inline bool Udp::is_override_cksum() const {
  return is_override_cksum_;
}
inline void Udp::set_is_override_cksum(bool value) {
  set_has_is_override_cksum();
  is_override_cksum_ = value;
}

// optional uint32 src_port = 5 [default = 49152];
inline bool Udp::has_src_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Udp::set_has_src_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Udp::clear_has_src_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Udp::clear_src_port() {
  src_port_ = 49152u;
  clear_has_src_port();
}
inline ::google::protobuf::uint32 Udp::src_port() const {
  return src_port_;
}
inline void Udp::set_src_port(::google::protobuf::uint32 value) {
  set_has_src_port();
  src_port_ = value;
}

// optional uint32 dst_port = 6 [default = 49153];
inline bool Udp::has_dst_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Udp::set_has_dst_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Udp::clear_has_dst_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Udp::clear_dst_port() {
  dst_port_ = 49153u;
  clear_has_dst_port();
}
inline ::google::protobuf::uint32 Udp::dst_port() const {
  return dst_port_;
}
inline void Udp::set_dst_port(::google::protobuf::uint32 value) {
  set_has_dst_port();
  dst_port_ = value;
}

// optional uint32 totlen = 7;
inline bool Udp::has_totlen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Udp::set_has_totlen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Udp::clear_has_totlen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Udp::clear_totlen() {
  totlen_ = 0u;
  clear_has_totlen();
}
inline ::google::protobuf::uint32 Udp::totlen() const {
  return totlen_;
}
inline void Udp::set_totlen(::google::protobuf::uint32 value) {
  set_has_totlen();
  totlen_ = value;
}

// optional uint32 cksum = 8;
inline bool Udp::has_cksum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Udp::set_has_cksum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Udp::clear_has_cksum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Udp::clear_cksum() {
  cksum_ = 0u;
  clear_has_cksum();
}
inline ::google::protobuf::uint32 Udp::cksum() const {
  return cksum_;
}
inline void Udp::set_cksum(::google::protobuf::uint32 value) {
  set_has_cksum();
  cksum_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_udp_2eproto__INCLUDED
