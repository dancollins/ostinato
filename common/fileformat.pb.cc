// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fileformat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OstProto {

namespace {

const ::google::protobuf::Descriptor* FileMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileMetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileContentMatter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileContentMatter_reflection_ = NULL;
const ::google::protobuf::Descriptor* File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  File_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileMagic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileMagic_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileChecksum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileChecksum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FileType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fileformat_2eproto() {
  protobuf_AddDesc_fileformat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fileformat.proto");
  GOOGLE_CHECK(file != NULL);
  FileMetaData_descriptor_ = file->message_type(0);
  static const int FileMetaData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, file_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, format_version_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, format_version_minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, format_version_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, generator_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, generator_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, generator_revision_),
  };
  FileMetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileMetaData_descriptor_,
      FileMetaData::default_instance_,
      FileMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileMetaData));
  FileContentMatter_descriptor_ = file->message_type(1);
  static const int FileContentMatter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileContentMatter, streams_),
  };
  FileContentMatter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileContentMatter_descriptor_,
      FileContentMatter::default_instance_,
      FileContentMatter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileContentMatter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileContentMatter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileContentMatter));
  File_descriptor_ = file->message_type(2);
  static const int File_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, magic_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, meta_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, content_matter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, checksum_value_),
  };
  File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      File_descriptor_,
      File::default_instance_,
      File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(File));
  FileMagic_descriptor_ = file->message_type(3);
  static const int FileMagic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMagic, value_),
  };
  FileMagic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileMagic_descriptor_,
      FileMagic::default_instance_,
      FileMagic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMagic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMagic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileMagic));
  FileMeta_descriptor_ = file->message_type(4);
  static const int FileMeta_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMeta, data_),
  };
  FileMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileMeta_descriptor_,
      FileMeta::default_instance_,
      FileMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileMeta));
  FileContent_descriptor_ = file->message_type(5);
  static const int FileContent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileContent, matter_),
  };
  FileContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileContent_descriptor_,
      FileContent::default_instance_,
      FileContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileContent));
  FileChecksum_descriptor_ = file->message_type(6);
  static const int FileChecksum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChecksum, value_),
  };
  FileChecksum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileChecksum_descriptor_,
      FileChecksum::default_instance_,
      FileChecksum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChecksum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChecksum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileChecksum));
  FileType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fileformat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileMetaData_descriptor_, &FileMetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileContentMatter_descriptor_, &FileContentMatter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    File_descriptor_, &File::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileMagic_descriptor_, &FileMagic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileMeta_descriptor_, &FileMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileContent_descriptor_, &FileContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileChecksum_descriptor_, &FileChecksum::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fileformat_2eproto() {
  delete FileMetaData::default_instance_;
  delete FileMetaData_reflection_;
  delete FileContentMatter::default_instance_;
  delete FileContentMatter_reflection_;
  delete File::default_instance_;
  delete File_reflection_;
  delete FileMagic::default_instance_;
  delete FileMagic_reflection_;
  delete FileMeta::default_instance_;
  delete FileMeta_reflection_;
  delete FileContent::default_instance_;
  delete FileContent_reflection_;
  delete FileChecksum::default_instance_;
  delete FileChecksum_reflection_;
}

void protobuf_AddDesc_fileformat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::OstProto::protobuf_AddDesc_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020fileformat.proto\022\010OstProto\032\016protocol.p"
    "roto\"\341\001\n\014FileMetaData\022%\n\tfile_type\030\001 \002(\016"
    "2\022.OstProto.FileType\022\034\n\024format_version_m"
    "ajor\030\002 \002(\r\022\034\n\024format_version_minor\030\003 \002(\r"
    "\022\037\n\027format_version_revision\030\004 \002(\r\022\026\n\016gen"
    "erator_name\030\005 \002(\t\022\031\n\021generator_version\030\006"
    " \002(\t\022\032\n\022generator_revision\030\007 \002(\t\"@\n\021File"
    "ContentMatter\022+\n\007streams\030\001 \001(\0132\032.OstProt"
    "o.StreamConfigList\"\215\001\n\004File\022\023\n\013magic_val"
    "ue\030\002 \002(\014\022)\n\tmeta_data\030\003 \002(\0132\026.OstProto.F"
    "ileMetaData\022-\n\016content_matter\030\t \001(\0132\025.Os"
    "tProto.FileContent\022\026\n\016checksum_value\030\017 \002"
    "(\007\"\032\n\tFileMagic\022\r\n\005value\030\002 \002(\014\"0\n\010FileMe"
    "ta\022$\n\004data\030\003 \002(\0132\026.OstProto.FileMetaData"
    "\":\n\013FileContent\022+\n\006matter\030\t \001(\0132\033.OstPro"
    "to.FileContentMatter\"\035\n\014FileChecksum\022\r\n\005"
    "value\030\017 \002(\007*7\n\010FileType\022\025\n\021kReservedFile"
    "Type\020\000\022\024\n\020kStreamsFileType\020\001", 708);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fileformat.proto", &protobuf_RegisterTypes);
  FileMetaData::default_instance_ = new FileMetaData();
  FileContentMatter::default_instance_ = new FileContentMatter();
  File::default_instance_ = new File();
  FileMagic::default_instance_ = new FileMagic();
  FileMeta::default_instance_ = new FileMeta();
  FileContent::default_instance_ = new FileContent();
  FileChecksum::default_instance_ = new FileChecksum();
  FileMetaData::default_instance_->InitAsDefaultInstance();
  FileContentMatter::default_instance_->InitAsDefaultInstance();
  File::default_instance_->InitAsDefaultInstance();
  FileMagic::default_instance_->InitAsDefaultInstance();
  FileMeta::default_instance_->InitAsDefaultInstance();
  FileContent::default_instance_->InitAsDefaultInstance();
  FileChecksum::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fileformat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fileformat_2eproto {
  StaticDescriptorInitializer_fileformat_2eproto() {
    protobuf_AddDesc_fileformat_2eproto();
  }
} static_descriptor_initializer_fileformat_2eproto_;

const ::google::protobuf::EnumDescriptor* FileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileType_descriptor_;
}
bool FileType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FileMetaData::kFileTypeFieldNumber;
const int FileMetaData::kFormatVersionMajorFieldNumber;
const int FileMetaData::kFormatVersionMinorFieldNumber;
const int FileMetaData::kFormatVersionRevisionFieldNumber;
const int FileMetaData::kGeneratorNameFieldNumber;
const int FileMetaData::kGeneratorVersionFieldNumber;
const int FileMetaData::kGeneratorRevisionFieldNumber;
#endif  // !_MSC_VER

FileMetaData::FileMetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileMetaData::InitAsDefaultInstance() {
}

FileMetaData::FileMetaData(const FileMetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileMetaData::SharedCtor() {
  _cached_size_ = 0;
  file_type_ = 0;
  format_version_major_ = 0u;
  format_version_minor_ = 0u;
  format_version_revision_ = 0u;
  generator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  generator_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  generator_revision_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileMetaData::~FileMetaData() {
  SharedDtor();
}

void FileMetaData::SharedDtor() {
  if (generator_name_ != &::google::protobuf::internal::kEmptyString) {
    delete generator_name_;
  }
  if (generator_version_ != &::google::protobuf::internal::kEmptyString) {
    delete generator_version_;
  }
  if (generator_revision_ != &::google::protobuf::internal::kEmptyString) {
    delete generator_revision_;
  }
  if (this != default_instance_) {
  }
}

void FileMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileMetaData_descriptor_;
}

const FileMetaData& FileMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileformat_2eproto();  return *default_instance_;
}

FileMetaData* FileMetaData::default_instance_ = NULL;

FileMetaData* FileMetaData::New() const {
  return new FileMetaData;
}

void FileMetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_type_ = 0;
    format_version_major_ = 0u;
    format_version_minor_ = 0u;
    format_version_revision_ = 0u;
    if (has_generator_name()) {
      if (generator_name_ != &::google::protobuf::internal::kEmptyString) {
        generator_name_->clear();
      }
    }
    if (has_generator_version()) {
      if (generator_version_ != &::google::protobuf::internal::kEmptyString) {
        generator_version_->clear();
      }
    }
    if (has_generator_revision()) {
      if (generator_revision_ != &::google::protobuf::internal::kEmptyString) {
        generator_revision_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .OstProto.FileType file_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (OstProto::FileType_IsValid(value)) {
            set_file_type(static_cast< OstProto::FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_format_version_major;
        break;
      }
      
      // required uint32 format_version_major = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format_version_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_version_major_)));
          set_has_format_version_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_format_version_minor;
        break;
      }
      
      // required uint32 format_version_minor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format_version_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_version_minor_)));
          set_has_format_version_minor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_format_version_revision;
        break;
      }
      
      // required uint32 format_version_revision = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format_version_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_version_revision_)));
          set_has_format_version_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_generator_name;
        break;
      }
      
      // required string generator_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generator_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->generator_name().data(), this->generator_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_generator_version;
        break;
      }
      
      // required string generator_version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generator_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generator_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->generator_version().data(), this->generator_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_generator_revision;
        break;
      }
      
      // required string generator_revision = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generator_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generator_revision()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->generator_revision().data(), this->generator_revision().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .OstProto.FileType file_type = 1;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->file_type(), output);
  }
  
  // required uint32 format_version_major = 2;
  if (has_format_version_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->format_version_major(), output);
  }
  
  // required uint32 format_version_minor = 3;
  if (has_format_version_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->format_version_minor(), output);
  }
  
  // required uint32 format_version_revision = 4;
  if (has_format_version_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->format_version_revision(), output);
  }
  
  // required string generator_name = 5;
  if (has_generator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->generator_name().data(), this->generator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->generator_name(), output);
  }
  
  // required string generator_version = 6;
  if (has_generator_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->generator_version().data(), this->generator_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->generator_version(), output);
  }
  
  // required string generator_revision = 7;
  if (has_generator_revision()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->generator_revision().data(), this->generator_revision().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->generator_revision(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .OstProto.FileType file_type = 1;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->file_type(), target);
  }
  
  // required uint32 format_version_major = 2;
  if (has_format_version_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->format_version_major(), target);
  }
  
  // required uint32 format_version_minor = 3;
  if (has_format_version_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->format_version_minor(), target);
  }
  
  // required uint32 format_version_revision = 4;
  if (has_format_version_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->format_version_revision(), target);
  }
  
  // required string generator_name = 5;
  if (has_generator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->generator_name().data(), this->generator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->generator_name(), target);
  }
  
  // required string generator_version = 6;
  if (has_generator_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->generator_version().data(), this->generator_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->generator_version(), target);
  }
  
  // required string generator_revision = 7;
  if (has_generator_revision()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->generator_revision().data(), this->generator_revision().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->generator_revision(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileMetaData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .OstProto.FileType file_type = 1;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
    }
    
    // required uint32 format_version_major = 2;
    if (has_format_version_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format_version_major());
    }
    
    // required uint32 format_version_minor = 3;
    if (has_format_version_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format_version_minor());
    }
    
    // required uint32 format_version_revision = 4;
    if (has_format_version_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format_version_revision());
    }
    
    // required string generator_name = 5;
    if (has_generator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->generator_name());
    }
    
    // required string generator_version = 6;
    if (has_generator_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->generator_version());
    }
    
    // required string generator_revision = 7;
    if (has_generator_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->generator_revision());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileMetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileMetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileMetaData::MergeFrom(const FileMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
    if (from.has_format_version_major()) {
      set_format_version_major(from.format_version_major());
    }
    if (from.has_format_version_minor()) {
      set_format_version_minor(from.format_version_minor());
    }
    if (from.has_format_version_revision()) {
      set_format_version_revision(from.format_version_revision());
    }
    if (from.has_generator_name()) {
      set_generator_name(from.generator_name());
    }
    if (from.has_generator_version()) {
      set_generator_version(from.generator_version());
    }
    if (from.has_generator_revision()) {
      set_generator_revision(from.generator_revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileMetaData::CopyFrom(const FileMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileMetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void FileMetaData::Swap(FileMetaData* other) {
  if (other != this) {
    std::swap(file_type_, other->file_type_);
    std::swap(format_version_major_, other->format_version_major_);
    std::swap(format_version_minor_, other->format_version_minor_);
    std::swap(format_version_revision_, other->format_version_revision_);
    std::swap(generator_name_, other->generator_name_);
    std::swap(generator_version_, other->generator_version_);
    std::swap(generator_revision_, other->generator_revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileMetaData_descriptor_;
  metadata.reflection = FileMetaData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileContentMatter::kStreamsFieldNumber;
#endif  // !_MSC_VER

FileContentMatter::FileContentMatter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileContentMatter::InitAsDefaultInstance() {
  streams_ = const_cast< ::OstProto::StreamConfigList*>(&::OstProto::StreamConfigList::default_instance());
}

FileContentMatter::FileContentMatter(const FileContentMatter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileContentMatter::SharedCtor() {
  _cached_size_ = 0;
  streams_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileContentMatter::~FileContentMatter() {
  SharedDtor();
}

void FileContentMatter::SharedDtor() {
  if (this != default_instance_) {
    delete streams_;
  }
}

void FileContentMatter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileContentMatter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileContentMatter_descriptor_;
}

const FileContentMatter& FileContentMatter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileformat_2eproto();  return *default_instance_;
}

FileContentMatter* FileContentMatter::default_instance_ = NULL;

FileContentMatter* FileContentMatter::New() const {
  return new FileContentMatter;
}

void FileContentMatter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_streams()) {
      if (streams_ != NULL) streams_->::OstProto::StreamConfigList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileContentMatter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OstProto.StreamConfigList streams = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileContentMatter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .OstProto.StreamConfigList streams = 1;
  if (has_streams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->streams(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileContentMatter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .OstProto.StreamConfigList streams = 1;
  if (has_streams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->streams(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileContentMatter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .OstProto.StreamConfigList streams = 1;
    if (has_streams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streams());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileContentMatter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileContentMatter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileContentMatter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileContentMatter::MergeFrom(const FileContentMatter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streams()) {
      mutable_streams()->::OstProto::StreamConfigList::MergeFrom(from.streams());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileContentMatter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileContentMatter::CopyFrom(const FileContentMatter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileContentMatter::IsInitialized() const {
  
  if (has_streams()) {
    if (!this->streams().IsInitialized()) return false;
  }
  return true;
}

void FileContentMatter::Swap(FileContentMatter* other) {
  if (other != this) {
    std::swap(streams_, other->streams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileContentMatter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileContentMatter_descriptor_;
  metadata.reflection = FileContentMatter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int File::kMagicValueFieldNumber;
const int File::kMetaDataFieldNumber;
const int File::kContentMatterFieldNumber;
const int File::kChecksumValueFieldNumber;
#endif  // !_MSC_VER

File::File()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void File::InitAsDefaultInstance() {
  meta_data_ = const_cast< ::OstProto::FileMetaData*>(&::OstProto::FileMetaData::default_instance());
  content_matter_ = const_cast< ::OstProto::FileContent*>(&::OstProto::FileContent::default_instance());
}

File::File(const File& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void File::SharedCtor() {
  _cached_size_ = 0;
  magic_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  meta_data_ = NULL;
  content_matter_ = NULL;
  checksum_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

File::~File() {
  SharedDtor();
}

void File::SharedDtor() {
  if (magic_value_ != &::google::protobuf::internal::kEmptyString) {
    delete magic_value_;
  }
  if (this != default_instance_) {
    delete meta_data_;
    delete content_matter_;
  }
}

void File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return File_descriptor_;
}

const File& File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileformat_2eproto();  return *default_instance_;
}

File* File::default_instance_ = NULL;

File* File::New() const {
  return new File;
}

void File::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_magic_value()) {
      if (magic_value_ != &::google::protobuf::internal::kEmptyString) {
        magic_value_->clear();
      }
    }
    if (has_meta_data()) {
      if (meta_data_ != NULL) meta_data_->::OstProto::FileMetaData::Clear();
    }
    if (has_content_matter()) {
      if (content_matter_ != NULL) content_matter_->::OstProto::FileContent::Clear();
    }
    checksum_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes magic_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_magic_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_meta_data;
        break;
      }
      
      // required .OstProto.FileMetaData meta_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meta_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_content_matter;
        break;
      }
      
      // optional .OstProto.FileContent content_matter = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_matter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content_matter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_checksum_value;
        break;
      }
      
      // required fixed32 checksum_value = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_checksum_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &checksum_value_)));
          set_has_checksum_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes magic_value = 2;
  if (has_magic_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->magic_value(), output);
  }
  
  // required .OstProto.FileMetaData meta_data = 3;
  if (has_meta_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->meta_data(), output);
  }
  
  // optional .OstProto.FileContent content_matter = 9;
  if (has_content_matter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->content_matter(), output);
  }
  
  // required fixed32 checksum_value = 15;
  if (has_checksum_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(15, this->checksum_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* File::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes magic_value = 2;
  if (has_magic_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->magic_value(), target);
  }
  
  // required .OstProto.FileMetaData meta_data = 3;
  if (has_meta_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->meta_data(), target);
  }
  
  // optional .OstProto.FileContent content_matter = 9;
  if (has_content_matter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->content_matter(), target);
  }
  
  // required fixed32 checksum_value = 15;
  if (has_checksum_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(15, this->checksum_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int File::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes magic_value = 2;
    if (has_magic_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->magic_value());
    }
    
    // required .OstProto.FileMetaData meta_data = 3;
    if (has_meta_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meta_data());
    }
    
    // optional .OstProto.FileContent content_matter = 9;
    if (has_content_matter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content_matter());
    }
    
    // required fixed32 checksum_value = 15;
    if (has_checksum_value()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void File::MergeFrom(const File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_magic_value()) {
      set_magic_value(from.magic_value());
    }
    if (from.has_meta_data()) {
      mutable_meta_data()->::OstProto::FileMetaData::MergeFrom(from.meta_data());
    }
    if (from.has_content_matter()) {
      mutable_content_matter()->::OstProto::FileContent::MergeFrom(from.content_matter());
    }
    if (from.has_checksum_value()) {
      set_checksum_value(from.checksum_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File::CopyFrom(const File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  if (has_meta_data()) {
    if (!this->meta_data().IsInitialized()) return false;
  }
  if (has_content_matter()) {
    if (!this->content_matter().IsInitialized()) return false;
  }
  return true;
}

void File::Swap(File* other) {
  if (other != this) {
    std::swap(magic_value_, other->magic_value_);
    std::swap(meta_data_, other->meta_data_);
    std::swap(content_matter_, other->content_matter_);
    std::swap(checksum_value_, other->checksum_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = File_descriptor_;
  metadata.reflection = File_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileMagic::kValueFieldNumber;
#endif  // !_MSC_VER

FileMagic::FileMagic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileMagic::InitAsDefaultInstance() {
}

FileMagic::FileMagic(const FileMagic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileMagic::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileMagic::~FileMagic() {
  SharedDtor();
}

void FileMagic::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void FileMagic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileMagic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileMagic_descriptor_;
}

const FileMagic& FileMagic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileformat_2eproto();  return *default_instance_;
}

FileMagic* FileMagic::default_instance_ = NULL;

FileMagic* FileMagic::New() const {
  return new FileMagic;
}

void FileMagic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileMagic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileMagic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileMagic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileMagic::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileMagic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileMagic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileMagic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileMagic::MergeFrom(const FileMagic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileMagic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileMagic::CopyFrom(const FileMagic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileMagic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FileMagic::Swap(FileMagic* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileMagic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileMagic_descriptor_;
  metadata.reflection = FileMagic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileMeta::kDataFieldNumber;
#endif  // !_MSC_VER

FileMeta::FileMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileMeta::InitAsDefaultInstance() {
  data_ = const_cast< ::OstProto::FileMetaData*>(&::OstProto::FileMetaData::default_instance());
}

FileMeta::FileMeta(const FileMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileMeta::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileMeta::~FileMeta() {
  SharedDtor();
}

void FileMeta::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FileMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileMeta_descriptor_;
}

const FileMeta& FileMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileformat_2eproto();  return *default_instance_;
}

FileMeta* FileMeta::default_instance_ = NULL;

FileMeta* FileMeta::New() const {
  return new FileMeta;
}

void FileMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::OstProto::FileMetaData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .OstProto.FileMetaData data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .OstProto.FileMetaData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .OstProto.FileMetaData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileMeta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .OstProto.FileMetaData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileMeta::MergeFrom(const FileMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::OstProto::FileMetaData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileMeta::CopyFrom(const FileMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void FileMeta::Swap(FileMeta* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileMeta_descriptor_;
  metadata.reflection = FileMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileContent::kMatterFieldNumber;
#endif  // !_MSC_VER

FileContent::FileContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileContent::InitAsDefaultInstance() {
  matter_ = const_cast< ::OstProto::FileContentMatter*>(&::OstProto::FileContentMatter::default_instance());
}

FileContent::FileContent(const FileContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileContent::SharedCtor() {
  _cached_size_ = 0;
  matter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileContent::~FileContent() {
  SharedDtor();
}

void FileContent::SharedDtor() {
  if (this != default_instance_) {
    delete matter_;
  }
}

void FileContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileContent_descriptor_;
}

const FileContent& FileContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileformat_2eproto();  return *default_instance_;
}

FileContent* FileContent::default_instance_ = NULL;

FileContent* FileContent::New() const {
  return new FileContent;
}

void FileContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_matter()) {
      if (matter_ != NULL) matter_->::OstProto::FileContentMatter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OstProto.FileContentMatter matter = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .OstProto.FileContentMatter matter = 9;
  if (has_matter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->matter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .OstProto.FileContentMatter matter = 9;
  if (has_matter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->matter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileContent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .OstProto.FileContentMatter matter = 9;
    if (has_matter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matter());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileContent::MergeFrom(const FileContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matter()) {
      mutable_matter()->::OstProto::FileContentMatter::MergeFrom(from.matter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileContent::CopyFrom(const FileContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileContent::IsInitialized() const {
  
  if (has_matter()) {
    if (!this->matter().IsInitialized()) return false;
  }
  return true;
}

void FileContent::Swap(FileContent* other) {
  if (other != this) {
    std::swap(matter_, other->matter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileContent_descriptor_;
  metadata.reflection = FileContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileChecksum::kValueFieldNumber;
#endif  // !_MSC_VER

FileChecksum::FileChecksum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileChecksum::InitAsDefaultInstance() {
}

FileChecksum::FileChecksum(const FileChecksum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileChecksum::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileChecksum::~FileChecksum() {
  SharedDtor();
}

void FileChecksum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileChecksum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileChecksum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileChecksum_descriptor_;
}

const FileChecksum& FileChecksum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fileformat_2eproto();  return *default_instance_;
}

FileChecksum* FileChecksum::default_instance_ = NULL;

FileChecksum* FileChecksum::New() const {
  return new FileChecksum;
}

void FileChecksum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileChecksum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 value = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileChecksum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 value = 15;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(15, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileChecksum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 value = 15;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(15, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileChecksum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 value = 15;
    if (has_value()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileChecksum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileChecksum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileChecksum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileChecksum::MergeFrom(const FileChecksum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileChecksum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileChecksum::CopyFrom(const FileChecksum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileChecksum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FileChecksum::Swap(FileChecksum* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileChecksum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileChecksum_descriptor_;
  metadata.reflection = FileChecksum_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

// @@protoc_insertion_point(global_scope)
