// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icmp.proto

#ifndef PROTOBUF_icmp_2eproto__INCLUDED
#define PROTOBUF_icmp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "protocol.pb.h"
// @@protoc_insertion_point(includes)

namespace OstProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_icmp_2eproto();
void protobuf_AssignDesc_icmp_2eproto();
void protobuf_ShutdownFile_icmp_2eproto();

class Icmp;

enum Icmp_Version {
  Icmp_Version_kIcmp4 = 4,
  Icmp_Version_kIcmp6 = 6
};
bool Icmp_Version_IsValid(int value);
const Icmp_Version Icmp_Version_Version_MIN = Icmp_Version_kIcmp4;
const Icmp_Version Icmp_Version_Version_MAX = Icmp_Version_kIcmp6;
const int Icmp_Version_Version_ARRAYSIZE = Icmp_Version_Version_MAX + 1;

const ::google::protobuf::EnumDescriptor* Icmp_Version_descriptor();
inline const ::std::string& Icmp_Version_Name(Icmp_Version value) {
  return ::google::protobuf::internal::NameOfEnum(
    Icmp_Version_descriptor(), value);
}
inline bool Icmp_Version_Parse(
    const ::std::string& name, Icmp_Version* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Icmp_Version>(
    Icmp_Version_descriptor(), name, value);
}
// ===================================================================

class Icmp : public ::google::protobuf::Message {
 public:
  Icmp();
  virtual ~Icmp();
  
  Icmp(const Icmp& from);
  
  inline Icmp& operator=(const Icmp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Icmp& default_instance();
  
  void Swap(Icmp* other);
  
  // implements Message ----------------------------------------------
  
  Icmp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Icmp& from);
  void MergeFrom(const Icmp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Icmp_Version Version;
  static const Version kIcmp4 = Icmp_Version_kIcmp4;
  static const Version kIcmp6 = Icmp_Version_kIcmp6;
  static inline bool Version_IsValid(int value) {
    return Icmp_Version_IsValid(value);
  }
  static const Version Version_MIN =
    Icmp_Version_Version_MIN;
  static const Version Version_MAX =
    Icmp_Version_Version_MAX;
  static const int Version_ARRAYSIZE =
    Icmp_Version_Version_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Version_descriptor() {
    return Icmp_Version_descriptor();
  }
  static inline const ::std::string& Version_Name(Version value) {
    return Icmp_Version_Name(value);
  }
  static inline bool Version_Parse(const ::std::string& name,
      Version* value) {
    return Icmp_Version_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .OstProto.Icmp.Version icmp_version = 1 [default = kIcmp4];
  inline bool has_icmp_version() const;
  inline void clear_icmp_version();
  static const int kIcmpVersionFieldNumber = 1;
  inline ::OstProto::Icmp_Version icmp_version() const;
  inline void set_icmp_version(::OstProto::Icmp_Version value);
  
  // optional bool is_override_checksum = 2;
  inline bool has_is_override_checksum() const;
  inline void clear_is_override_checksum();
  static const int kIsOverrideChecksumFieldNumber = 2;
  inline bool is_override_checksum() const;
  inline void set_is_override_checksum(bool value);
  
  // optional uint32 type = 6 [default = 8];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 code = 7;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 7;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);
  
  // optional uint32 checksum = 8;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 8;
  inline ::google::protobuf::uint32 checksum() const;
  inline void set_checksum(::google::protobuf::uint32 value);
  
  // optional uint32 identifier = 9 [default = 1234];
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 9;
  inline ::google::protobuf::uint32 identifier() const;
  inline void set_identifier(::google::protobuf::uint32 value);
  
  // optional uint32 sequence = 10;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 10;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:OstProto.Icmp)
 private:
  inline void set_has_icmp_version();
  inline void clear_has_icmp_version();
  inline void set_has_is_override_checksum();
  inline void clear_has_is_override_checksum();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_checksum();
  inline void clear_has_checksum();
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int icmp_version_;
  bool is_override_checksum_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 code_;
  ::google::protobuf::uint32 checksum_;
  ::google::protobuf::uint32 identifier_;
  ::google::protobuf::uint32 sequence_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_icmp_2eproto();
  friend void protobuf_AssignDesc_icmp_2eproto();
  friend void protobuf_ShutdownFile_icmp_2eproto();
  
  void InitAsDefaultInstance();
  static Icmp* default_instance_;
};
// ===================================================================

static const int kIcmpFieldNumber = 402;
extern ::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Icmp >, 11, false >
  icmp;

// ===================================================================

// Icmp

// optional .OstProto.Icmp.Version icmp_version = 1 [default = kIcmp4];
inline bool Icmp::has_icmp_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Icmp::set_has_icmp_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Icmp::clear_has_icmp_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Icmp::clear_icmp_version() {
  icmp_version_ = 4;
  clear_has_icmp_version();
}
inline ::OstProto::Icmp_Version Icmp::icmp_version() const {
  return static_cast< ::OstProto::Icmp_Version >(icmp_version_);
}
inline void Icmp::set_icmp_version(::OstProto::Icmp_Version value) {
  GOOGLE_DCHECK(::OstProto::Icmp_Version_IsValid(value));
  set_has_icmp_version();
  icmp_version_ = value;
}

// optional bool is_override_checksum = 2;
inline bool Icmp::has_is_override_checksum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Icmp::set_has_is_override_checksum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Icmp::clear_has_is_override_checksum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Icmp::clear_is_override_checksum() {
  is_override_checksum_ = false;
  clear_has_is_override_checksum();
}
inline bool Icmp::is_override_checksum() const {
  return is_override_checksum_;
}
inline void Icmp::set_is_override_checksum(bool value) {
  set_has_is_override_checksum();
  is_override_checksum_ = value;
}

// optional uint32 type = 6 [default = 8];
inline bool Icmp::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Icmp::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Icmp::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Icmp::clear_type() {
  type_ = 8u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Icmp::type() const {
  return type_;
}
inline void Icmp::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 code = 7;
inline bool Icmp::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Icmp::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Icmp::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Icmp::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google::protobuf::uint32 Icmp::code() const {
  return code_;
}
inline void Icmp::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
}

// optional uint32 checksum = 8;
inline bool Icmp::has_checksum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Icmp::set_has_checksum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Icmp::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Icmp::clear_checksum() {
  checksum_ = 0u;
  clear_has_checksum();
}
inline ::google::protobuf::uint32 Icmp::checksum() const {
  return checksum_;
}
inline void Icmp::set_checksum(::google::protobuf::uint32 value) {
  set_has_checksum();
  checksum_ = value;
}

// optional uint32 identifier = 9 [default = 1234];
inline bool Icmp::has_identifier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Icmp::set_has_identifier() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Icmp::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Icmp::clear_identifier() {
  identifier_ = 1234u;
  clear_has_identifier();
}
inline ::google::protobuf::uint32 Icmp::identifier() const {
  return identifier_;
}
inline void Icmp::set_identifier(::google::protobuf::uint32 value) {
  set_has_identifier();
  identifier_ = value;
}

// optional uint32 sequence = 10;
inline bool Icmp::has_sequence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Icmp::set_has_sequence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Icmp::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Icmp::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 Icmp::sequence() const {
  return sequence_;
}
inline void Icmp::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OstProto::Icmp_Version>() {
  return ::OstProto::Icmp_Version_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_icmp_2eproto__INCLUDED
